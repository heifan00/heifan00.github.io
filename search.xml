<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次低码平台问题排查</title>
      <link href="/Java/kill_bug_dima/"/>
      <url>/Java/kill_bug_dima/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>主表为产品表，子表关联主表id，并且有一个状态字段来标明该产品的状态；新建时可以对该<em><strong>state</strong></em>字段进行赋值，而编辑时更新该字段不生效。</p><p>若不做关联，单单更新子表该状态时，更新是正常的。</p> <span id="more"></span> <h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="单表更新时的请求体（正常）"><a href="#单表更新时的请求体（正常）" class="headerlink" title="单表更新时的请求体（正常）"></a>单表更新时的请求体（正常）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path:/api/visualdev/OnlineDev/418773450413310789/418791234753004357?n=1682039432</span><br><span class="line">body:</span><br><span class="line">&#123;&quot;id&quot;:&quot;418791234753004357&quot;,&quot;data&quot;:&quot;&#123;\&quot;pro_num\&quot;:\&quot;998\&quot;,\&quot;pro_status\&quot;:\&quot;3\&quot;,\&quot;id\&quot;:\&quot;418791234753004357\&quot;,\&quot;flowId\&quot;:\&quot;\&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p>其中pro_status字段为关联数据字典的字段，关联enCode。</p><h3 id="主从表新增（正常）"><a href="#主从表新增（正常）" class="headerlink" title="主从表新增（正常）"></a>主从表新增（正常）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path:/api/visualdev/OnlineDev/<span class="number">419027988068172613</span>?n=<span class="number">1682041034</span></span><br><span class="line">body:</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;data&quot;</span>:<span class="string">&quot;&#123;\&quot;pro_num\&quot;:\&quot;xx1\&quot;,\&quot;F_Description\&quot;:\&quot;xx1\&quot;,\&quot;heifan_pro_status_heifan_pro_status\&quot;:\&quot;1\&quot;,\&quot;id\&quot;:\&quot;\&quot;,\&quot;flowId\&quot;:\&quot;\&quot;&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="主从表更新（异常）"><a href="#主从表更新（异常）" class="headerlink" title="主从表更新（异常）"></a>主从表更新（异常）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path:/api/visualdev/OnlineDev/<span class="number">419027988068172613</span>/<span class="number">419030400854131525</span>?n=<span class="number">1682041193</span></span><br><span class="line">body:</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;419030400854131525&quot;</span>,<span class="string">&quot;data&quot;</span>:<span class="string">&quot;&#123;\&quot;F_Description\&quot;:\&quot;xx11\&quot;,\&quot;pro_num\&quot;:\&quot;xx1\&quot;,\&quot;id\&quot;:\&quot;419030400854131525\&quot;,\&quot;heifan_pro_status_heifan_pro_status\&quot;:\&quot;2\&quot;,\&quot;flowId\&quot;:\&quot;\&quot;&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>主表中的F_Description字段更新成功，表示子表里status字段的heifan_pro_status_heifan_pro_status更新失败。</p><p>更新后列表返回的数据为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;heifan_pro_status_heifan_pro_status&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span># 此字段为<span class="literal"><span class="keyword">null</span></span></span><br><span class="line">                <span class="attr">&quot;F_Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;419030400854131525&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;419030400854131525&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;F_Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pro_num&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx1&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pagination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="测试主从表更新时，从表的其他值是否会更新"><a href="#测试主从表更新时，从表的其他值是否会更新" class="headerlink" title="测试主从表更新时，从表的其他值是否会更新"></a>测试主从表更新时，从表的其他值是否会更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path:/api/visualdev/OnlineDev/<span class="number">419027988068172613</span>/<span class="number">419032755356042053</span>?n=<span class="number">1682041757</span></span><br><span class="line">body:</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;419032755356042053&quot;</span>,<span class="string">&quot;data&quot;</span>:<span class="string">&quot;&#123;\&quot;F_Description\&quot;:\&quot;xx2\&quot;,\&quot;pro_num\&quot;:\&quot;xx2\&quot;,\&quot;id\&quot;:\&quot;419032755356042053\&quot;,\&quot;heifan_pro_status_heifan_pro_status\&quot;:\&quot;3\&quot;,\&quot;heifan_pro_status_heifan_pro_desc\&quot;:\&quot;生产中\&quot;,\&quot;flowId\&quot;:\&quot;\&quot;&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>测试后发现，子表其他字段也是更新失败。</p><p>在测试过程中发现，编辑子表时回显有一定的问题；新建的所有属性均能正确的存入库中，但列表返回时子表的所有字段都会为空。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>debug更新接口，对入参以及key值转换进行检查，发现一切正常；</li><li>逐行调试代码，发现在获取子表数据时会生成一个UUID，更新时应该是不需要生成新的ID的，这是疑问点①；</li><li>在生成sql后，执行前，将sql语句粘贴至工具内执行发现更新语句有问题，WHERE id = 主表id，疑问点②；</li></ol><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>疑问点①，源码应该是被二开过，为了适配postgresSQL；</li><li>疑问点②，拼接SQL将列名改为关联字段，实现WHERE ref_id = 主表id，问题解决。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>问题是小问题，花的时间有点多，原因在于项目代码不够熟悉，还得多看多熟悉！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git开发流程规范</title>
      <link href="/Java/git_dev/"/>
      <url>/Java/git_dev/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><h2 id="规范代码开发流程"><a href="#规范代码开发流程" class="headerlink" title="规范代码开发流程"></a>规范代码开发流程</h2><blockquote><p>git 分支分为集成分支、功能分支和修复分支，分别命名为 develop、feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p></blockquote> <span id="more"></span> <p>1.git主分支(master)。它是自动建立，用于发布重大版本更新（github 现在默认是是main 因种族歧视问题）<br>2.git开发主分支(develop)。日常开发在此分支上进行<br>3.git临时性分支：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支)</p><!-- more --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 功能（feature）分支：它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。</span><br><span class="line">- 预发布（release）分支：指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，</span><br><span class="line">必须合并进Develop和Master分支。它的命名，可以采用release-的形式。</span><br><span class="line">- 修补bug（hotfix）分支：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master或Develop分支上面分出来的。修补结束以后，</span><br><span class="line">再合并进Master和Develop分支。它的命名，可以采用hotfix-***的形式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开发流程</p><blockquote><p>暂定临时分支feature、hotfix两种启用。暂不启用RP、code review。</p></blockquote><p>1.基于develop生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><p>修复bug流程</p><blockquote><p>根据最新已经上线的分支代码创建hotfix分支。</p></blockquote><p>1.基于develop或者上个tag版本(根据实际情况而定)生成新临时开发分支。<br>2.测试、正式环境上线通过。<br>3.合并至develop分支，并生成对应的tag版本。<br>4.<code>若存在临时开发分支</code>-完成特定功能开发后(验证OK后，应该删除此分支)。<br>5.<code>若存在临时开发分支</code>-临时开发分支合并已经修复bug的develop代码。<br>6.<code>若存在临时开发分支</code>-临时开发分支完成特定功能开发后(验证OK后，应该删除此分支)。<br>7.README.md文档中记录tag版本生成时间以及具体的功能名称。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="开发尺码"><a href="#开发尺码" class="headerlink" title="开发尺码"></a>开发尺码</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop // 切换开发分支，git pull origin develop 并同步最新的develop分支代码。（强制）</span><br><span class="line">git checkout -b feature-sizeGroup //基于develop分支创建新的开发分支（强制）</span><br><span class="line">git push origin craftsAddUUID:craftsAddUUID //将本地新分支推送到远程（前本地，后远程）</span><br><span class="line">git checkout develop // feature-sizeGroup完成上线后develop分支准备合并分支（强制）</span><br><span class="line">git merge feature-sizeGroup // 合并开发功能分支（强制）</span><br><span class="line">git tag -a v1<span class="number">.4</span> -m <span class="string">&quot;my version 1.4&quot;</span> // 合并完成创建标签备注中简单说明开发功能（强制）</span><br><span class="line">git push origin v1<span class="number">.4</span> // 推送tag标签到远程仓库（强制）</span><br><span class="line">git branch -d feature-sizeGroup //删除本地的临时开发分支(非强制)</span><br><span class="line">git push origin <span class="comment">--delete feature-sizeGroup // 删除远程的临时开发分支（强制）</span></span><br><span class="line">vim README.md // 保存新增tag版本记录（强制）</span><br><span class="line">git add README.md // 追踪README.md文件。（强制）</span><br><span class="line">git commit -m <span class="string">&quot;发布新的tag&quot;</span> // 将暂存区里的改动给提交到本地的版本库（强制）</span><br><span class="line">git push origin develop // 推送改动后的develop（强制）</span><br></pre></td></tr></table></figure><h3 id="master-合并周期"><a href="#master-合并周期" class="headerlink" title="master 合并周期"></a>master 合并周期</h3><blockquote><p>每月月底最后几个工作日完成对master 对develop分支的合并。</p></blockquote><h3 id="tag-版本命名"><a href="#tag-版本命名" class="headerlink" title="tag 版本命名"></a>tag 版本命名</h3><blockquote><p>版本命名规范</p></blockquote><ul><li>版本: v1.1.1 ( Build 101001 )</li><li>版本格式 bigVersion.middleVersion.smallVersion</li><li>bigVersion 大版本(年度或者重大更新（强制更新，老版本存在不兼容等情况）) 取值范围 1-99</li><li>middleVersion 迭代版本 取值范围 1-99</li><li>smallVersion bug修复增强发布。 取值范围 1-999</li><li>Build为版本纯数字格式化。</li></ul><h3 id="git帮助文档"><a href="#git帮助文档" class="headerlink" title="git帮助文档"></a>git帮助文档</h3><p><a href="https://gitee.com/all-about-git">git 大全</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/Java/factory_pattern/"/>
      <url>/Java/factory_pattern/</url>
      
        <content type="html"><![CDATA[<p>工厂设计模式（Factory Pattern）是一种很常见的设计模式，属于创建型模式，主要作用就是来创建对象。</p><p><a href="https://imgtu.com/i/jZiB2n"><img src="https://s1.ax1x.com/2022/06/27/jZiB2n.png" alt="jZiB2npng"></a></p><span id="more"></span> <h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><a href="https://imgtu.com/i/jZixxI"><img src="https://s1.ax1x.com/2022/06/27/jZixxI.png" alt="jZixxIpng"></a></p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>新建一个只提供返回品牌的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heifan.design.patterns.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 品牌接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/27 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LaptopI</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/27 21:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">brand</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LenovoLaptop</span> <span class="keyword">implements</span> <span class="title class_">LaptopI</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">brand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Lenovo&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacLaptop</span> <span class="keyword">implements</span> <span class="title class_">LaptopI</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">brand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mac&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LaptopFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LaptopI <span class="title function_">createLapTop</span><span class="params">(String brand)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (brand)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Lenovo&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LenovoLaptop</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Mac&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacLaptop</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LaptopI</span> <span class="variable">mac</span> <span class="operator">=</span> LaptopFactory.createLapTop(<span class="string">&quot;Mac&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">brand</span> <span class="operator">=</span> mac.brand();</span><br><span class="line">        System.out.println(brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h3><h4 id="超类"><a href="#超类" class="headerlink" title="超类"></a>超类</h4><p>超类可以是接口、抽象类、父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getRAM</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getHDD</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getCPU</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RAM= &quot;</span>+<span class="built_in">this</span>.getRAM()+<span class="string">&quot;, HDD=&quot;</span>+<span class="built_in">this</span>.getHDD()+<span class="string">&quot;, CPU=&quot;</span>+<span class="built_in">this</span>.getCPU();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h4><p>子类 PC 和 Server 实现了 Computer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PC</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hdd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PC</span><span class="params">(String ram, String hdd, String cpu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.ram=ram;</span><br><span class="line">        <span class="built_in">this</span>.hdd=hdd;</span><br><span class="line">        <span class="built_in">this</span>.cpu=cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHDD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCPU</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cpu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">extends</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hdd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">(String ram, String hdd, String cpu)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.ram=ram;</span><br><span class="line">        <span class="built_in">this</span>.hdd=hdd;</span><br><span class="line">        <span class="built_in">this</span>.cpu=cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ram;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHDD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCPU</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cpu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h4><p>基于相同的参数类型，返回了不同的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Computer <span class="title function_">getComputer</span><span class="params">(String type, String ram, String hdd, String cpu)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;PC&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PC</span>(ram, hdd, cpu);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Server&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Server</span>(ram, hdd, cpu);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">pc</span> <span class="operator">=</span> ComputerFactory.getComputer(<span class="string">&quot;PC&quot;</span>, <span class="string">&quot;2 GB&quot;</span>, <span class="string">&quot;500 GB&quot;</span>, <span class="string">&quot;2.4 GHz&quot;</span>);</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">server</span> <span class="operator">=</span> ComputerFactory.getComputer(<span class="string">&quot;Server&quot;</span>, <span class="string">&quot;16 GB&quot;</span>, <span class="string">&quot;1 TB&quot;</span>, <span class="string">&quot;2.9 GHz&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Factory PC Config::&quot;</span> + pc);</span><br><span class="line">        System.out.println(<span class="string">&quot;Factory Server Config::&quot;</span> + server);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Factory PC Config::RAM= <span class="number">2</span> GB, HDD=<span class="number">500</span> GB, CPU=<span class="number">2.4</span> GHz</span><br><span class="line">Factory Server Config::RAM= <span class="number">16</span> GB, HDD=<span class="number">1</span> TB, CPU=<span class="number">2.9</span> GHz</span><br></pre></td></tr></table></figure><h3 id="工厂设计模式的优点"><a href="#工厂设计模式的优点" class="headerlink" title="工厂设计模式的优点"></a>工厂设计模式的优点</h3><ul><li><p>面向接口编程，体现了面向对象的思想；</p></li><li><p>将创建对象的工作转移到了工厂；</p></li></ul><h3 id="JDK中的工厂设计模式"><a href="#JDK中的工厂设计模式" class="headerlink" title="JDK中的工厂设计模式"></a>JDK中的工厂设计模式</h3><ul><li>java.util.Calendar, ResourceBundle and NumberFormat getInstance() 使用了工厂方法模式；</li><li>valueOf() 在包装类中，如Boolean, Integer 也使用了工厂方法模式；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库单表实现多级子树</title>
      <link href="/Java/tree_test/"/>
      <url>/Java/tree_test/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>数据库单表存储多级别数据，使用parent_id字段进行关联。</p></blockquote> <span id="more"></span> <h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heifan.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 树形结构测试表</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-03-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTreeNode</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父级主键（0：无父级）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nodeName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试用例，写法不规范，大家在开发过程中一定要规范开发！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heifan.demo.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heifan.demo.entity.TestTreeNode;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTreeVO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父级主键（0：无父级）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nodeName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TestTreeVO&gt; childList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">treeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        List&lt;TestTreeVO&gt; testTreeVOS = testTreeNodeDao.selectAll();</span><br><span class="line">        List&lt;TestTreeVO&gt; testTreeNodeList = testTreeVOS.stream().filter(m -&gt; m.getId().equals(id)).map(</span><br><span class="line">                (m) -&gt; &#123;</span><br><span class="line">                    m.setChildList(getChildrens(m, testTreeVOS));</span><br><span class="line">                    <span class="keyword">return</span> m;</span><br><span class="line">                &#125;</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonTool.beanToJson(testTreeNodeList);</span><br><span class="line">        log.info(s);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归查询子节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> all  所有节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TestTreeVO&gt; <span class="title function_">getChildrens</span><span class="params">(TestTreeVO root, List&lt;TestTreeVO&gt; all)</span> &#123;</span><br><span class="line">        List&lt;TestTreeVO&gt; children = all.stream().filter(m -&gt; Objects.equals(m.getParentId(), root.getId())).map(</span><br><span class="line">                (m) -&gt; &#123;</span><br><span class="line">                    m.setChildList(getChildrens(m, all));</span><br><span class="line">                    <span class="keyword">return</span> m;</span><br><span class="line">                &#125;</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Tree </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/Java/linux/"/>
      <url>/Java/linux/</url>
      
        <content type="html"><![CDATA[<h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li>firewall-cmd –zone=public –add-port=80/tcp –permanent ： 手动开启端口命令<br>命令含义： –zone #作用域 –add-port=80/tcp #添加端口，格式为：端口/通讯协议 –permanent #永久生效，没有此参数重启后失效</li></ul> <span id="more"></span> <ul><li><p>systemctl restart firewalld.service ：重启 </p></li><li><p>firewall-cmd –list-all ：  查看防火墙是否开启了80端口的访问 </p></li><li><p>netstat -ntlp ： 查看当前所有tcp端口</p></li><li><p>netstat -tunlp | grep 80 ：  查看80端口被谁占用 </p></li><li><p>kill -9 进程号 ： 杀进程</p></li></ul><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><ul><li>free ： 显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。free命令默认是显示单位kb，可以采用free -m和free -g命令查看，分别表示MB和GB；另外，free -h会自动选择以适合理解的容量单位显示</li></ul><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><ul><li>chmod 777 ： 修改权限</li></ul><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><ul><li>nginx -s reload ： 重新载入配置文件</li><li>nginx -s reopen ： 重启</li><li>nginx -s stop ： 停止</li></ul><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ul><li>tail -f xxxx-xxx-xxxx-xxxx.log ： 动态刷新日志</li><li>tail -n +1 xxxx-xxx-xxxx-xxxx.log ： 从第一行查看日志</li><li>grep “INFO” xxxx-xxx-xxxx-xxxx.log ： 查询日志里所有INFO级别的记录（可查链路id）</li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li>whereis logs ： 查询logs路径</li><li>find / -name file1  ：从 ‘/‘ 开始进入根文件系统搜索文件和目录</li><li>find /home/user1 -name *.bin  ： 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件</li><li>ps aux | grep java ：查看Java进程</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JJWT框架的使用</title>
      <link href="/Java//jjwt_demo/"/>
      <url>/Java//jjwt_demo/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h3><p>JWTs是JSON对象的编码表示。JSON对象由零或多个名称/值对组成，其中名称为字符串，值为任意JSON值。JWT有助于在clear(例如在URL中)发送这样的信息，可以被信任为不可读(即加密的)、不可修改的(即签名)和URL - safe(即Base64编码的)。</p> <span id="more"></span> <h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li><p><strong>Authorization</strong> (授权) ：一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p></li><li><p><strong>Information Exchange</strong> (信息交换)：对于安全的在各方之间传输信息而言，JSON Web Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p></li></ul><h4 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h4><ol><li><p>Header：标题包含了令牌的元数据，并且在最小包含签名和/或加密算法的类型；</p></li><li><p>Claims：Claims包含想要签署的任何信息；</p></li><li><p>JSON Web Signature (JWS)：在Header中指定的使用该算法的数字签名和声明</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Header<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">Claims<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">Signature<span class="punctuation">:</span></span><br><span class="line">base64UrlEncode(Header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(Claims)<span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="JWT的框架：JJWT"><a href="#JWT的框架：JJWT" class="headerlink" title="JWT的框架：JJWT"></a>JWT的框架：JJWT</h4><p>JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License，版本2.0)，JJWT很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。</p><h3 id="开始上手"><a href="#开始上手" class="headerlink" title="开始上手"></a>开始上手</h3><h4 id="demo-jjwt"><a href="#demo-jjwt" class="headerlink" title="demo-jjwt"></a>demo-jjwt</h4><ul><li><p>创建maven项目；</p></li><li><p>导入依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jjwt  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>JwtUtils</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_TOKEN_HEADER</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REFRESH_TOKEN_HEADER</span> <span class="operator">=</span> <span class="string">&quot;Refresh-Token&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的 用户续期时长（时间戳） 7天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEF_RENEWAL_TIMESTAMP</span> <span class="operator">=</span> <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的 校验时间间隔（时间戳）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEF_CHECK_INTERVAL</span> <span class="operator">=</span> <span class="number">1800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的 jwt 过期时间 1天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEF_EXPIRATION</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发的密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;demo.jjwt.token&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEF_ISS</span> <span class="operator">=</span> <span class="string">&quot;https://www.keaijing.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 令牌用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">U_DATA</span> <span class="operator">=</span> <span class="string">&quot;U&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">issueJwt</span><span class="params">(Long phoneNum)</span> &#123;</span><br><span class="line">        Assert.notNull(phoneNum, <span class="string">&quot;phoneNum is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setSubject(phoneNum + <span class="string">&quot;&quot;</span>)</span><br><span class="line">                .setIssuer(DEF_ISS)</span><br><span class="line">                .setIssuedAt(DateUtil.date())</span><br><span class="line">                .setExpiration(DateUtil.date(System.currentTimeMillis() + DEF_EXPIRATION))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkJwtExpiration</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(jwt.trim())</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == claims) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> claims.getExpiration().before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;jwt 过期啦～～～～&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIxNzYzMzgyMzk4MSIsImlzcyI6Imh0dHBzOi8vd3d3LmtlYWlqaW5nLmNvbSIsImlhdCI6MTY0NDIyMjAwMSwiZXhwIjoxNjQ0MzA4NDAxfQ.WBX6S1HQZqZtUsjH7XGKlIRWoNCmSSLq7nn24jXSbo4PCTIqSj-Uo6XiEjhda5-Vo91_lhnwSXCb2qVctFNqjQ&quot;</span>;</span><br><span class="line"><span class="comment">//        log.info(issueJwt(17612343344L));</span></span><br><span class="line">        log.info(<span class="string">&quot;&quot;</span> + checkJwtExpiration(token));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><h4 id="JwtAuthInfo"><a href="#JwtAuthInfo" class="headerlink" title="JwtAuthInfo"></a>JwtAuthInfo</h4><p>在用户Token里存储用户信息，方便解析后直接进行校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/9 13:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String usrId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accountNumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户别称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验时间间隔（时间戳）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long checkInterval;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAuthManager"><a href="#JwtAuthManager" class="headerlink" title="JwtAuthManager"></a>JwtAuthManager</h4><p>创建JwtAuthManager用户权限管理类，用于校验Token格式、签发Toekn等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt用户权限管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/9 14:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_TOKEN_HEADER</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的 校验时间间隔（时间戳）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEF_CHECK_INTERVAL</span> <span class="operator">=</span> <span class="number">1800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认的 jwt 过期时间 1天</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">DEF_EXPIRATION</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发的密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;demo.jjwt.token&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEF_ISS</span> <span class="operator">=</span> <span class="string">&quot;https://www.keaijing.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 令牌用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">U_DATA</span> <span class="operator">=</span> <span class="string">&quot;U&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwtAuthInfo <span class="title function_">getJwtAuthentication</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getJwt(request);</span><br><span class="line">        <span class="keyword">return</span> getJwtAuthInfo(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getJwt</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenHeader</span> <span class="operator">=</span> request.getHeader(JwtAuthManager.ACCESS_TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (tokenHeader == <span class="literal">null</span> || !tokenHeader.startsWith(JwtAuthManager.TOKEN_PREFIX)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenHeader.replace(JwtAuthManager.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Strings.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwtAuthInfo <span class="title function_">getJwtAuthInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == token) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; header 中未找到 jwt信息&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        token = token.trim();</span><br><span class="line">        <span class="type">JwtAuthInfo</span> <span class="variable">JwtAuthInfo</span> <span class="operator">=</span> JwtAuthInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == JwtAuthInfo) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; jwt 解析失败&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JwtAuthInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwtAuthInfo <span class="title function_">JwtAuthInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.trim())</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 检查失败,无法刷新token。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> claims.get(U_DATA);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(obj.toString(), JwtAuthInfo.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签发token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> checkInterval</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expiration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/2/9 14:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">issueJwt</span><span class="params">(String userId,</span></span><br><span class="line"><span class="params">                                  Long checkInterval,</span></span><br><span class="line"><span class="params">                                  Long expiration)</span> &#123;</span><br><span class="line">        Assert.notNull(userId, <span class="string">&quot;userId is null&quot;</span>);</span><br><span class="line">        Assert.notNull(checkInterval, <span class="string">&quot;checkInterval is null&quot;</span>);</span><br><span class="line">        Assert.notNull(expiration, <span class="string">&quot;expiration is null&quot;</span>);</span><br><span class="line">        <span class="type">JwtAuthInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> JwtAuthInfo.builder()</span><br><span class="line">                .usrId(userId)</span><br><span class="line">                .checkInterval(checkInterval)</span><br><span class="line">                .expiration(expiration)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> issueJwt(tokenInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">issueJwt</span><span class="params">(JwtAuthInfo JwtAuthInfo)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">u</span> <span class="operator">=</span> gson.toJson(JwtAuthInfo);</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(U_DATA, u);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                .setIssuer(DEF_ISS)</span><br><span class="line">                .setSubject(String.valueOf(JwtAuthInfo.getUsrId()))</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + JwtAuthInfo.getExpiration() * <span class="number">1000</span>))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt true 过期 false未过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkJwtExpiration</span><span class="params">(String jwt)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(jwt.trim())</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == claims) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> claims.getExpiration().before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;jwt 过期啦～～～～&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">refresh</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.trim())</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;token 检查失败,无法刷新token。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims.getExpiration().before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;jwt 过期啦～～～～&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">u</span> <span class="operator">=</span> claims.get(U_DATA);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == u) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;jwt 无效 ～～～～&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">JwtAuthInfo</span> <span class="variable">tokenInfo</span> <span class="operator">=</span> gson.fromJson(u.toString(), JwtAuthInfo.class);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expiration</span> <span class="operator">=</span> tokenInfo.getExpiration();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        map.put(U_DATA, u);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, SECRET)</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                .setIssuer(DEF_ISS)</span><br><span class="line">                .setSubject(String.valueOf(tokenInfo.getUsrId()))</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="number">1000</span>))</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建默认条件到U_DATA</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> usrId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.heifan.demo.config.auth.JwtAuthInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/2/9 14:12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JwtAuthInfo <span class="title function_">createJwtAuthInfo</span><span class="params">(String usrId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JwtAuthInfo.builder()</span><br><span class="line">                .usrId(usrId)</span><br><span class="line">                .checkInterval(DEF_CHECK_INTERVAL)</span><br><span class="line">                .expiration(DEF_EXPIRATION)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtAuthorizationManager"><a href="#JwtAuthorizationManager" class="headerlink" title="JwtAuthorizationManager"></a>JwtAuthorizationManager</h4><p>创建jwt认证类，用于校验账号在线状态以及解析Token里的用户信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt认证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/9 14:17</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthorizationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCOUNT_AUTH_ONLINE_KEY</span> <span class="operator">=</span> <span class="string">&quot;demo:jwt:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisCacheServiceI redisCacheService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">authorization</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getJwt(request);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == token) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorization(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getJwt</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenHeader</span> <span class="operator">=</span> request.getHeader(JwtAuthManager.ACCESS_TOKEN_HEADER);</span><br><span class="line">        <span class="keyword">if</span> (tokenHeader == <span class="literal">null</span> || !tokenHeader.startsWith(JwtAuthManager.TOKEN_PREFIX)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenHeader.replace(JwtAuthManager.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Strings.isEmpty(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token.trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">authorization</span><span class="params">(String tokenHeader)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenHeader.replace(JwtAuthManager.TOKEN_PREFIX, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">JwtAuthInfo</span> <span class="variable">jwtAuthInfo</span> <span class="operator">=</span> getJwtAuthInfo(token);</span><br><span class="line">        online(token, jwtAuthInfo);</span><br><span class="line">        <span class="keyword">return</span> jwtAuthInfo.getAccountNumber();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwtAuthInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/2/9 14:22</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">online</span><span class="params">(String token, JwtAuthInfo jwtAuthInfo)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheKey</span> <span class="operator">=</span> ACCOUNT_AUTH_ONLINE_KEY + jwtAuthInfo.getAccountNumber();</span><br><span class="line">        <span class="type">String</span> <span class="variable">online</span> <span class="operator">=</span> redisCacheService.getStr(cacheKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == online) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;账号未登录&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!online.equals(token)) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;账号其他设备登录&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.USER_OFFLINE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JwtAuthInfo <span class="title function_">getJwtAuthInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == token) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; header 中未找到 jwt信息&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParamException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        token = token.trim();</span><br><span class="line">        <span class="type">JwtAuthInfo</span> <span class="variable">jwtAuthInfo</span> <span class="operator">=</span> JwtAuthManager.getJwtAuthInfo(token);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == jwtAuthInfo) &#123;</span><br><span class="line">            log.error(<span class="string">&quot; jwt 解析失败&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParamException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jwtAuthInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鉴权思路"><a href="#鉴权思路" class="headerlink" title="鉴权思路"></a>鉴权思路</h3><ol><li><p>自定义注解；</p></li><li><p>请求进入到切面，获取请求参数，记录请求路径及请求参数；</p></li><li><p>获取方法中声明的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法中声明的注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2022/2/8 20:42</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MonitorAnnotation <span class="title function_">getDeclaredAnnotation</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">// 反射获取目标类</span></span><br><span class="line">        Class&lt;?&gt; targetClass = joinPoint.getTarget().getClass();</span><br><span class="line">        <span class="comment">// 拿到方法对应的参数类型</span></span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = ((MethodSignature) joinPoint.getSignature()).getParameterTypes();</span><br><span class="line">        <span class="comment">// 根据类、方法、参数类型（重载）获取到方法的具体信息</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">objMethod</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            objMethod = targetClass.getMethod(methodName, parameterTypes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到方法定义的注解信息</span></span><br><span class="line">        <span class="keyword">return</span> objMethod.getDeclaredAnnotation(MonitorAnnotation.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果注解鉴权属性为true，则解析用户Token中的信息；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MonitorAnnotation</span> <span class="variable">monitorAnnotation</span> <span class="operator">=</span> getDeclaredAnnotation(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != monitorAnnotation) &#123;</span><br><span class="line">            <span class="keyword">if</span> (monitorAnnotation.auth()) &#123;</span><br><span class="line">                <span class="comment">// 如果是http请求</span></span><br><span class="line">                <span class="keyword">if</span> (httpRequest) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">accountNumber</span> <span class="operator">=</span> jwtAuthorizationManager.authorization(request);</span><br><span class="line">                    <span class="comment">// 此处应该校验用户id是否为空</span></span><br><span class="line">                    <span class="keyword">if</span> (Validator.isNull(accountNumber)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParamException</span>(MessageCodeEnum.NOT_LOGIN);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> 鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/Java/mysql_index/"/>
      <url>/Java/mysql_index/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>索引是辅助存储引擎高效获取数据的一种数据结构。形象的说索引就是数据的目录，便于存储引擎快速的定位数据。</p> <span id="more"></span> <h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><h5 id="从数据结构角度"><a href="#从数据结构角度" class="headerlink" title="从数据结构角度"></a>从数据结构角度</h5><ul><li>B+tree</li><li>Hash</li><li>Full-text</li></ul><h5 id="从物理存储角度"><a href="#从物理存储角度" class="headerlink" title="从物理存储角度"></a>从物理存储角度</h5><ul><li>聚簇索引</li><li>二级索引（辅助索引）</li></ul><h5 id="从索引字段特性角度"><a href="#从索引字段特性角度" class="headerlink" title="从索引字段特性角度"></a>从索引字段特性角度</h5><ul><li>主键索引</li><li>唯一索引</li><li>普通索引</li><li>前缀索引</li></ul><h5 id="从组成索引的字段个数角度"><a href="#从组成索引的字段个数角度" class="headerlink" title="从组成索引的字段个数角度"></a>从组成索引的字段个数角度</h5><ul><li>单列索引</li><li>联合索引（复合索引）</li></ul><h4 id="MySQL常见的存储引擎"><a href="#MySQL常见的存储引擎" class="headerlink" title="MySQL常见的存储引擎"></a>MySQL常见的存储引擎</h4><table><thead><tr><th></th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree 索引</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>Hash 索引</td><td>NO</td><td>NO</td><td>YES</td></tr><tr><td>Full-text 索引</td><td>YES</td><td>YES</td><td>NO</td></tr></tbody></table><p>在实际使用中，InnoDB 作为 MySQL 建表时默认的存储引擎；B+tree 是 MySQL 中被存储引擎采用最多的索引类型。</p><h4 id="B-tree和B-tree"><a href="#B-tree和B-tree" class="headerlink" title="B+tree和B-tree"></a>B+tree和B-tree</h4><blockquote><p>1970 年，R.Bayer 和 E.Mccreight 提出了一种适用于外查找的平衡多叉树——B-树，磁盘管理系统中的目录管理，以及数据库系统中的索引组织多数采用 B-Tree 这种数据结构。–数据结构 C 语言版第二版 严蔚敏</p></blockquote><p>B+tree 只在叶子节点存储数据，而 B-tree 非叶子节点也存储数据。</p><p>在线测试</p><ul><li>B-tree : <code>https://www.cs.usfca.edu/~galles/visualization/BTree.html</code></li><li>B+tree : <code>https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</code></li></ul><h4 id="B-tree和红黑树"><a href="#B-tree和红黑树" class="headerlink" title="B+tree和红黑树"></a>B+tree和红黑树</h4><p>对于有 N 个叶子节点的 B+tree，搜索复杂度为 <strong>「O(logdN) ,d 是指 degree 是指 B+tree 的度」</strong>，表示节点允许的最大子节点个数为 d 个，在实际的运用中 d 值是大于 100 的，即使数据达到千万级别时候 B+tree 的高度依然维持在 3-4 左右，保证了 3-4 次磁盘 I/O 就能查到目标数据。</p><p>红黑树是二叉树，节点的子节点个数最多为 2 个，意味着其搜索复杂度为 <strong>「O(logN)」</strong>，比 B+ 树高出不少，因此红黑树检索到目标数据所需经理的磁盘 I/O 次数更多。</p><h4 id="B-tree-索引与-Hash-索引"><a href="#B-tree-索引与-Hash-索引" class="headerlink" title="B+tree 索引与 Hash 索引"></a>B+tree 索引与 Hash 索引</h4><p>如果是等价查询，则哈希索引显然具有绝对优势，因为只需一种算法即可找到相应的键值；当然，前提是键值是唯一的,如果存在hash冲突就必须链表遍历了。</p><p>哈希索引不支持范围查询(不过改造之后可以,Java中的LinkedHashMap通过链表保存了节点的插入顺序,那么也可以使用链表将数据的大小顺序保存起来)。</p><p>哈希索引无法使用索引排序以及模糊匹配；<br>哈希索引也不支持多列联合索引的最左边匹配规则；<br>键值大量冲突的情况下,Hash索引效率极低。</p><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB 表要求必须有聚簇索引，默认在主键字段上建立聚簇索引，在没有主键字段的情况下，表的第一个 NOT NULL 的唯一索引将被建立为聚簇索引，在前两者都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列并在此列上创建聚簇索引。</p><p>二级索引的叶子节点并不存储一行完整的表数据，而是存储了聚簇索引所在列的值。</p><p>说了聚簇索引和二级索引 肯定要提到「回表查询」。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> workers <span class="keyword">add</span> index index_name(name);</span><br></pre></td></tr></table></figure><p>由于二级索引的叶子节点不存储完整的表数据，所以当通过二级索引查询到聚簇索引的列值后，还需要回到局促索引也就是表数据本身进一步获取数据。</p><p>需要注意的是通过二级索引查询时，回表不是必须的过程，当 Query 的所有字段在二级索引中就能找到时，就不需要回表，MySQL 称此时的二级索引为覆盖索引或称触发了 「索引覆盖」。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> workers <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;吕归尘&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这句 SQL 只查询了 id，和 name，二级索引就已经包含了 Query 所以需要的所有字段，就无需回表查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id,name <span class="keyword">from</span> workers <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;吕归尘&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行计划的 Extra 字段中出现了 Using where;Using index 表明查询触发了索引 index_name 的索引覆盖，且对索引做了 where 筛选，这里不需要回表。</p><p>Extra 为 Using Index Condition 表示会先条件过滤索引，过滤完索引后找到所有符合索引条件的数据行，随后用 WHERE 子句中的其他条件去过滤这些数据行。Index Condition Pushdown (ICP)是 MySQL 5.6 以上版本中的新特性，是一种在存储引擎层使用索引过滤数据的一种优化方式。ICP 开启时的执行计划含有 Using index condition 标示 ，表示优化器使用了 ICP 对数据访问进行优化。</p><p>不考虑 ICP 对数据访问的优化，当关闭 ICP 时，Index 仅仅是 data access 的一种访问方式，存储引擎通过索引回表获取的数据会传递到 MySQL Server 层进行 WHERE 条件过滤。</p><p>Extra 为 Using where 只是提醒我们 MySQL 将用 where 子句来过滤结果集。这个一般发生在 MySQL 服务器，而不是存储引擎层。一般发生在不能走索引扫描的情况下或者走索引扫描，但是有些查询条件不在索引当中的情况下。</p><p>这里表明没有触发索引覆盖，进行回表查询。</p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>以 MyISAM 存储引擎存储的表不存在聚簇索引。MyISAM 表中的主键索引和非主键索引的结构是一样的。他们的叶子节点是不存储表数据的，节点中存放的是表数据的地址，所以 MyISAM 表可以没有主键。MyISAM 表的数据和索引是分开的，是单独存放的。</p><p>MyISAM 表中的主键索引和非主键索引的区别仅在于主键索引 B+tree 上的 key 必须符合主键的限制，非主键索引 B+tree 上的 key 只要符合相应字段的特性就可以了。</p><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><ul><li>建立在主键字段上的索引</li><li>一张表最多有一个主键索引</li><li>索引列值不允许为null</li><li>通常在创建表的时候一起创建</li></ul><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><ul><li>建立在 UNIQUE 字段上的索引就是唯一索引</li><li>一张表可以有多个唯一索引，索引列值允许为 null</li></ul><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><ul><li>建立在普通字段上的索引叫做普通索引，没有主键限制</li></ul><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><ul><li>前缀索引是指对字符串的前几个字符或对二进制类型字段的前几个bytes建立的索引，而不是在整个字段上建索引。</li><li>前缀索引可以建立在类型为：char、varchar、binary、verbinary的列上，可以大大减少索引占用的存储空间，也能提升索引的查询效率。</li></ul><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><ul><li>联合索引是一个索引结构，这两个条目表示的是组合索引中字段的具体信息，按建立索引时的书写顺序排序。</li><li>组合索引的非叶子节点保存了两个字段的值作为 B+tree 的 key 值，当 B+tree 上插入数据时，先按字段 id 比较，在 id 相同的情况下按 name 字段比较。</li></ul><h4 id="查看索引命令"><a href="#查看索引命令" class="headerlink" title="查看索引命令"></a>查看索引命令</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tableName</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应该抵制的品牌</title>
      <link href="/Collections/resist/"/>
      <url>/Collections/resist/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>吾辈自强！</p></blockquote> <span id="more"></span> <h3 id="食品"><a href="#食品" class="headerlink" title="食品"></a>食品</h3><ul><li><p>三只松鼠：<a href="https://www.sohu.com/a/512357394_163524?scm=&spm=smpc.topic_147.tpl-content-feed-list-1.3.1640783430576ZxmWwhR_44495">三只松鼠海报引争议，模特眯眯眼妆容被指丑化国人_胡锡进评三只松鼠广告模特妆容争议_宣传_网友 (sohu.com)</a></p></li><li><p>汉堡王：<a href="https://www.sohu.com/a/409319479_120065808">广告辱华、食品问题频发…丑闻缠身的它为何还能狂捞 1625 亿？_汉堡 (sohu.com)</a></p></li></ul><h3 id="化妆品"><a href="#化妆品" class="headerlink" title="化妆品"></a>化妆品</h3><ul><li>美国彩妆品牌tarte：<a href="https://www.sohu.com/a/229620143_99958381">除了巴黎世家，这些品牌也曾歧视华人！ (sohu.com)</a></li></ul><h3 id="服饰"><a href="#服饰" class="headerlink" title="服饰"></a>服饰</h3><ul><li>D&amp;G：<a href="https://baijiahao.baidu.com/s?id=1695372619897371592&wfr=spider&for=pc">盘点哪些辱华品牌，H&amp;M凉凉，还记得被赶出国内的乐天和D&amp;G吗？ (baidu.com)</a></li><li>日本POLA</li><li>德国philipp plein</li><li>巴黎世家</li><li>范思哲（Versace）</li><li>蔻驰（Coach）</li><li>纪梵希（Givenchy）</li><li>ASICS亚瑟士</li><li>馥蕾诗（Fresh）</li><li>CK（Calvin Klein ）</li></ul><h3 id="饰品"><a href="#饰品" class="headerlink" title="饰品"></a>饰品</h3><ul><li>施华洛世奇：<a href="https://baijiahao.baidu.com/s?id=1695200172997057416&wfr=spider&for=pc">在H&amp;M、耐克前，还有哪些品牌涉嫌辱华？ (baidu.com)</a></li></ul><h3 id="新疆棉事件"><a href="#新疆棉事件" class="headerlink" title="新疆棉事件"></a>新疆棉事件</h3><ul><li>H&amp;M</li><li>优衣库</li><li>无印良品</li><li>东芝</li><li>日立</li><li>索尼</li><li>耐克</li><li>阿迪达斯</li><li>鳄鱼</li><li>ZARA</li><li>匡威</li><li>拉夫劳伦</li><li>GU</li><li>杰克琼斯</li></ul><h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><ul><li><a href="http://www.smartshe.com/ent/20210707/99960.html">辱华品牌一览表2021，请认清它们的嘴脸！_她时代-女性时尚生活宝典 (smartshe.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/50769965">细数那些辱华的品牌，我们可以用哪些产品来替代它们？ - 知乎 (zhihu.com)</a></li><li><a href="https://baijiahao.baidu.com/s?id=1641653690267788907&wfr=spider&for=pc">六大品牌涉嫌辱华，一大半中国代言人宣布解约，这些品牌会凉吗？ (baidu.com)</a></li><li><a href="https://finance.gucheng.com/202104/4029344.shtml">新疆棉花事件涉及品牌有哪些 它们作出道歉了吗？-股城热点 (gucheng.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抵制 </tag>
            
            <tag> 品牌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存储技巧</title>
      <link href="/Java/mysql_tips/"/>
      <url>/Java/mysql_tips/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>数据库某一字段需要存储多个同类型的值</li><li>多个图片地址存入一个字段</li></ul> <span id="more"></span> <h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollectionUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.Validator;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.ArrayUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> HiF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/20 21:59</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValCommonUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEFT_CURLYBRACES</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RIGHT_CURLYBRACES</span> <span class="operator">=</span> <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被&#123;&#125;包围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURLYBRACES_AROUND</span> <span class="operator">=</span> <span class="string">&quot;\\&#123;.+?&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流水号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 支付流水号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">tradeSn</span><span class="params">(<span class="type">int</span> ran)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yyyyMMddHHmmss&quot;</span>) + randomNumeric(ran);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机指定位数字符串（纯数字）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomNumeric</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RandomUtil.randomNumbers(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isChineseByRange</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] ch = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ch) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="number">0x4E00</span> || c &gt; <span class="number">0x9FBF</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合转字符串（每个元素用&#123;&#125;包括）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">merge</span><span class="params">(Collection&lt;T&gt; collection)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(collection)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (T element : collection) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element != <span class="literal">null</span> &amp;&amp; Validator.isNotEmpty(element.toString())) &#123;</span><br><span class="line">                builder.append(LEFT_CURLYBRACES).append(element)</span><br><span class="line">                        .append(RIGHT_CURLYBRACES);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串转List（每个元素用&#123;&#125;包括）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     *            字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">split</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isEmpty(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(CURLYBRACES_AROUND);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> matcher.group().substring(<span class="number">1</span>, matcher.group().length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (Validator.isNotNull(element)) &#123;</span><br><span class="line">                list.add(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成店铺订单号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 订单号前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sn     订单序号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 订单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">no</span><span class="params">(String prefix, Long sn)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sn + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// suffix补充到四位（至少四位）</span></span><br><span class="line">        <span class="keyword">while</span> (suffix.length() &lt; <span class="number">6</span>) &#123;</span><br><span class="line">            suffix.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix + suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符串转集合（指定分隔符）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str       字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">split</span><span class="params">(String str, String separator)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isEmpty(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 没有分隔符，不进行分隔</span></span><br><span class="line">        <span class="keyword">if</span> (Validator.isEmpty(separator)) &#123;</span><br><span class="line">            list.add(str);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] array = str.split(separator);</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(array)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String element : array) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Validator.isNotEmpty(element)) &#123;</span><br><span class="line">                list.add(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在数据库中存储为VARCHAR类型，例如：{1}{2}{3}{4}{5}；转换后为List：[1, 2, 3, 4, 5]<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3>存储时用“{”、“}”包裹起来，取值时就能转换为List，肥肠的方便</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AopDemo</title>
      <link href="/Java/aopdemo/"/>
      <url>/Java/aopdemo/</url>
      
        <content type="html"><![CDATA[<h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><p>简单地去理解，其实AOP要做三类事：</p><ul><li>在哪里切入，也就是权限校验等非业务操作在哪些业务代码中执行。</li><li>在什么时候切入，是业务代码执行前还是执行后。</li><li>切入后做什么事，比如做权限校验、日志记录等。</li></ul><p>因此，AOP的体系可以梳理为下图：</p> <span id="more"></span> <p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20171110%2F9ae24140b59b41ce841cff0c3595500f.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642596825&t=9923d715b52cb64b8189b7860db78632" alt="image-20210617093001113"></p><ul><li><code>Pointcut</code>：切点，决定处理如权限校验、日志记录等在何处切入业务代码中（即织入切面）。切点分为<code>execution</code>方式和<code>annotation</code>方式。前者可以用路径表达式指定哪些类织入切面，后者可以指定被哪些注解修饰的代码织入切面。</li><li><code>Advice</code>：处理，包括处理时机和处理内容。处理内容就是要做什么事，比如校验权限和记录日志。处理时机就是在什么时机执行处理内容，分为前置处理（即业务代码执行前）、后置处理（业务代码执行后）等。</li><li><code>Aspect</code>：切面，即<code>Pointcut</code>和<code>Advice</code>。</li><li><code>Joint point</code>：连接点，是程序执行的一个点。例如，一个方法的执行或者一个异常的处理。在 Spring AOP 中，一个连接点总是代表一个方法执行。</li><li><code>Weaving</code>：织入，就是通过动态代理，在目标对象方法中执行处理内容的过程。</li></ul><h3 id="自定义注解的步骤"><a href="#自定义注解的步骤" class="headerlink" title="自定义注解的步骤"></a>自定义注解的步骤</h3><ol><li><p>使用<code>@Target、@Retention、@Documented</code>自定义一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PermissionsAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建第一个AOP切面类，只要在类上加个 <code>@Aspect</code> 注解即可。<code>@Aspect</code> 注解用来描述一个切面类，定义切面类的时候需要打上这个注解。<code>@Component</code> 注解将该类交给 Spring 来管理。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(8)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionFirstAdvice</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切面，括号内写入第一步自定义注解的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.lff.demo.annotation.PermissionsAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">permissionCheck</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;permissionCheck()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">permissionCheckFirst</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======第一个切面======&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        Object[] objects = joinPoint.getArgs();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> ((JSONObject) objects[<span class="number">0</span>]).getLong(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ((JSONObject) objects[<span class="number">0</span>]).getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;id1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;name1-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// id小于0抛出非法id异常</span></span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;illegal id\&quot;,\&quot;code\&quot;:403&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建接口类，运行测试。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.lff.demo.annotation.PermissionsAnnotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/permission&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line">    <span class="meta">@PermissionsAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">getGroupList</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject request)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(<span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;SUCCESS\&quot;,\&quot;code\&quot;:200&#125;,\&quot;data\&quot;:&quot;</span> + request + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Aop相关注解"><a href="#Aop相关注解" class="headerlink" title="Aop相关注解"></a>Aop相关注解</h3><ol><li><p><code>@Pointcut</code> 注解，用来定义一个切面，即上文中所关注的某件事情的入口，切入点定义了事件触发时机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.lff.demo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logAdvicePointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Pointcut 注解指定一个切面，定义需要拦截的东西，这里介绍两个常用的表达式：一个是使用 <code>execution()</code>，另一个是使用 <code>annotation()</code>。</p><p>更多参考：<a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&mid=2247488811&idx=2&sn=0d054027651bef114ae6bec5a8f62359&chksm=ebd62a07dca1a3111269692dd9b0a5ab8af7d2038b8ec6600a057573364e76db1332adc5fd46&scene=21#wechat_redirect">SpringBoot内容聚合</a></p><p>execution表达式：</p><p>以 <code>execution(* * com.mutest.controller..*.*(..)))</code> 表达式为例：</p><ul><li>第一个 * 号的位置：表示返回值类型，* 表示所有类型。</li><li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，在本例中指 com.mutest.controller包、子包下所有类的方法。</li><li>第二个 * 号的位置：表示类名，* 表示所有类。</li><li><em>(..)：这个星号表示方法名，</em> 表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</li></ul><p>annotation() 表达式：</p><p><code>annotation()</code> 方式是针对某个注解来定义切面，比如我们对具有 @PostMapping 注解的方法做切面，可以如下定义切面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@annotation(org.springframework.web.bind.annotation.PostMapping)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">annotationPointcut</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后使用该切面的话，就会切入注解是 <code>@PostMapping</code> 的所有方法。这种方式很适合处理 <code>@GetMapping、@PostMapping、@DeleteMapping</code>不同注解有各种特定处理逻辑的场景。</p><p>还有就是如上面案例所示，针对自定义注解来定义切面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个切面，括号内写入第一步自定义注解的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.lff.demo.annotation.PermissionsAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">permissionCheck</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Around</code>注解用于修饰<code>Around</code>增强处理，<code>Around</code>增强处理非常强大，表现在：</p><ol><li><code>@Around</code>可以自由选择增强动作与目标方法的执行顺序，也就是说可以在增强动作前后，甚至过程中执行目标方法。这个特性的实现在于，调用<code>ProceedingJoinPoint</code>参数的<code>procedd()</code>方法才会执行目标方法。</li><li><code>@Around</code>可以改变执行目标方法的参数值，也可以改变执行目标方法之后的返回值。</li></ol><p><code>Around</code>增强处理有以下特点：</p><ol><li>当定义一个<code>Around</code>增强处理方法时，该方法的第一个形参必须是 <code>ProceedingJoinPoint</code> 类型（至少一个形参）。在增强处理方法体内，调用<code>ProceedingJoinPoint</code>的<code>proceed</code>方法才会执行目标方法：这就是<code>@Around</code>增强处理可以完全控制目标方法执行时机、如何执行的关键；如果程序没有调用<code>ProceedingJoinPoint</code>的<code>proceed</code>方法，则目标方法不会执行。</li><li>调用<code>ProceedingJoinPoint</code>的<code>proceed</code>方法时，还可以传入一个<code>Object[ ]</code>对象，该数组中的值将被传入目标方法作为实参——这就是<code>Around</code>增强处理方法可以改变目标方法参数值的关键。这就是如果传入的<code>Object[ ]</code>数组长度与目标方法所需要的参数个数不相等，或者<code>Object[ ]</code>数组元素与目标方法所需参数的类型不匹配，程序就会出现异常。</li></ol><p><code>@Around</code>功能虽然强大，但通常需要在线程安全的环境下使用。因此，如果使用普通的<code>Before</code>、<code>AfterReturning</code>就能解决的问题，就没有必要使用<code>Around</code>了。如果需要目标方法执行之前和之后共享某种状态数据，则应该考虑使用<code>Around</code>。尤其是需要使用增强处理阻止目标的执行，或需要改变目标方法的返回值时，则只能使用<code>Around</code>增强处理了。</p></li><li><p><code>@Before</code> 注解指定的方法在切面切入目标方法之前执行，可以做一些 <code>Log</code> 处理，也可以做一些信息的统计，比如获取用户的请求 <code>URL</code> 以及用户的 <code>IP</code> 地址等等，这个在做个人站点的时候都能用得到，都是常用的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HiF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(7)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.lff.demo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logAdvicePointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法之前执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;logAdvicePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;====doBefore====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取签名</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取切入点的报名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取即将执行的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        log.info(<span class="string">&quot;即将执行的方法：&#123;&#125;,属于：&#123;&#125;包&quot;</span>,name,declaringTypeName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可以用来记录一些信息，比如请求的url和ip</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求URL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求IP</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getRemoteAddr();</span><br><span class="line">        log.info(<span class="string">&quot;用户请求的url为：&#123;&#125;，ip地址为：&#123;&#125;&quot;</span>, url, ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JointPoint</code> 对象很有用，可以用它来获取一个签名，利用签名可以获取请求的包名、方法名，包括参数（通过 <code>joinPoint.getArgs()</code> 获取）等。</p></li><li><p><code>@After</code> 注解和 <code>@Before</code> 注解相对应，指定的方法在切面切入目标方法之后执行，也可以做一些完成某方法之后的 Log 处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Pointcut(&quot;execution(* com.lff.demo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logAdvicePointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在上面定义的切面方法之后执行该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint jointPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@After(&quot;logAdvicePointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;==== doAfter 方法进入了====&quot;</span>);</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        log.info(<span class="string">&quot;方法&#123;&#125;已经执行完&quot;</span>, method);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@AfterReturning</code> 注解和 <code>@After</code> 有些类似，区别在于 <code>@AfterReturning</code> 注解可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.lff.demo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logAdvicePointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;logAdvicePointcut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">classMethod</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        log.info(<span class="string">&quot;方法&#123;&#125;执行完毕,返回参数为：&#123;&#125;&quot;</span>,classMethod,result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实际项目中可以根据业务做具体的返回值增强</span></span><br><span class="line">        log.info(<span class="string">&quot;对返回参数进行业务上的增强：&#123;&#125;&quot;</span>,result+<span class="string">&quot;增强版&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在 <code>@AfterReturning</code> 注解 中，属性 <code>returning</code> 的值必须要和参数保持一致，否则会检测不到。该方法中的第二个入参就是被切方法的返回值，在 <code>doAfterReturning</code> 方法中可以对返回值进行增强，可以根据业务需要做相应的封装。</p></li><li><p>当被切方法执行过程中抛出异常时，会进入 <code>@AfterThrowing</code> 注解的方法中执行，在该方法中可以做一些异常的处理逻辑。要注意的是 <code>throwing</code> 属性的值必须要和参数一致，否则会报错。该方法中的第二个入参即为抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.lff.demo.controller..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logAdvicePointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;logAdvicePointcut()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理异常的逻辑</span></span><br><span class="line">        log.info(<span class="string">&quot;执行方法&#123;&#125;出错，异常为:&#123;&#125;&quot;</span>,method,ex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HuTool工具类</title>
      <link href="/Java/hutool_validator/"/>
      <url>/Java/hutool_validator/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>HuTool工具类的使用</p></blockquote> <span id="more"></span> <h2 id="一、Validator字段验证器"><a href="#一、Validator字段验证器" class="headerlink" title="一、Validator字段验证器"></a>一、Validator字段验证器</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>作为菜鸟的我，在进行Dao层返回值校验的时候，一般会用这样的方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (detailTemp == <span class="literal">null</span>) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;查询结果为空。detailTemp:&#123;&#125;&quot;</span>,detailTemp);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.PARAM_ERROR.getCode(), <span class="string">&quot;查询结果为空!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>但我研究大佬的代码发现了一种更有逼格的写法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Validator.isNull(detailTemp)) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;查询结果为空。detailTemp:&#123;&#125;&quot;</span>,detailTemp);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.PARAM_ERROR.getCode(), <span class="string">&quot;查询结果为空!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>虽然不知道为什么，但就是觉得牛逼，开整！<h3 id="开整"><a href="#开整" class="headerlink" title="开整"></a>开整</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-直接用就完了，没有第2步"><a href="#2-直接用就完了，没有第2步" class="headerlink" title="2.直接用就完了，没有第2步"></a>2.直接用就完了，没有第2步</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>很好用，还支持自定义校验等高级操作。<br>参考文档：<a href="https://hutool.cn/docs/#/core/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E5%AD%97%E6%AE%B5%E9%AA%8C%E8%AF%81%E5%99%A8-Validator?id=%e4%bd%bf%e7%94%a8">HuTool</a></li></ul><h2 id="二、coming-soon"><a href="#二、coming-soon" class="headerlink" title="二、coming soon"></a>二、coming soon</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HuTool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子序和_力扣53</title>
      <link href="/Java/leetcode_53/"/>
      <url>/Java/leetcode_53/</url>
      
        <content type="html"><![CDATA[<h3 id="给定一个整数数组-nums-，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"><a href="#给定一个整数数组-nums-，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。" class="headerlink" title="给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"></a>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</h3><h3 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h3> <span id="more"></span> <h4 id="运用动态规划的思路解决"><a href="#运用动态规划的思路解决" class="headerlink" title="运用动态规划的思路解决"></a>运用动态规划的思路解决</h4><ul><li>动态规划的是首先对数组进行遍历，当前最大连续子序列和为 sum，结果为 res</li><li>如果 sum &gt; 0，则说明 sum 对结果有增益效果，则 sum 保留并加上当前遍历数字</li><li>如果 sum &lt;= 0，则说明 sum 对结果无增益效果，需要舍弃，则 sum 直接更新为当前遍历数字</li><li>每次比较 sum 和 res 的大小，将最大值置为 res，遍历结束返回结果</li><li>时间复杂度：O(n)O(n)<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line"><span class="comment">// 判断是否有增益效果</span></span><br><span class="line">           <span class="keyword">if</span> (sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">               sum += num;</span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 没有增益效果，将sum赋值为当前遍历数</span></span><br><span class="line">               sum = num;</span><br><span class="line">           &#125; </span><br><span class="line"><span class="comment">// 在res和sum中选取最大值赋值给res</span></span><br><span class="line">           res = Math.max(res, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>来源：力扣（<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/hua-jie-suan-fa-53-zui-da-zi-xu-he-by-guanpengchn/">LeetCode</a>）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的中序遍历</title>
      <link href="/Java/leetcode_94/"/>
      <url>/Java/leetcode_94/</url>
      
        <content type="html"><![CDATA[<h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><h4 id="二叉树的遍历方式"><a href="#二叉树的遍历方式" class="headerlink" title="二叉树的遍历方式"></a>二叉树的遍历方式</h4><ul><li>先序遍历：根 - 左 - 右</li><li>中序遍历：左 - 根 - 右</li><li>后序遍历：左 - 右 - 根</li><li>层序遍历：每一层从左至右</li></ul> <span id="more"></span> <h4 id="递归实现遍历"><a href="#递归实现遍历" class="headerlink" title="递归实现遍历"></a>递归实现遍历</h4><ul><li><p>按照左 - 根 - 右的顺序遍历整个二叉树，在遍历左子树或右子树的时候采用同样的方式遍历，具有天然的递归性，而递归的终止条件就是碰到空节点；</p></li><li><p>定义 inorder(root) 表示当前遍历到 root 节点的答案，那么按照定义，我们只要递归调用 inorder(root.left) 来遍历 root 节点的左子树，然后将 root 节点的值加入答案，再递归调用inorder(root.right) 来遍历 root 节点的右子树即可。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        inorder(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == root)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, res);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        inorder(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4></li><li><p>时间复杂度：O(n)，其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。</p></li></ul><p>来源：力扣（<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio/">LeetCode</a>）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL导出注释信息</title>
      <link href="/Java/mysql_output/"/>
      <url>/Java/mysql_output/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>查询出来的信息可以直接粘贴到Excel内！肥肠的方便！</p></blockquote> <span id="more"></span> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    COLUMN_NAME 列名,</span><br><span class="line">    COLUMN_TYPE 数据类型,</span><br><span class="line">    DATA_TYPE 字段类型,</span><br><span class="line">    CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">    IS_NULLABLE 是否为空,</span><br><span class="line">    COLUMN_DEFAULT 默认值,</span><br><span class="line">    COLUMN_COMMENT 备注</span><br><span class="line">FROM</span><br><span class="line">    information_schema. COLUMNS</span><br><span class="line">WHERE</span><br><span class="line">    TABLE_NAME = &#x27;XXX_XXXX&#x27; -- 表名</span><br><span class="line">AND TABLE_SCHEMA = &#x27;XXXX&#x27;; -- 数据库名称</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis工具类封装</title>
      <link href="/Java/redis_cache_service/"/>
      <url>/Java/redis_cache_service/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>该工具类是大佬在20年编写的</li><li>我在使用过程中发现少了hMGet方法</li><li>所以就照葫芦画瓢，写了hMGet方法</li><li>不使用RedisTemplate封装的方法是因为不想用（大佬说有bug）</li><li>自己封装，用起来岂不是更牛逼？</li></ul> <span id="more"></span> <h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul><li>序列化<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="1-RedisCacheServiceI"><a href="#1-RedisCacheServiceI" class="headerlink" title="1. RedisCacheServiceI"></a>1. RedisCacheServiceI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.weliner.business.config.domain.Search;</span><br><span class="line"><span class="keyword">import</span> com.weliner.business.config.utils.SortTypeEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisZSetCommands;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ****.coding@gmail.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisCacheServiceI</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有符合给定模式 pattern 的 key ， 比如说：</span></span><br><span class="line"><span class="comment">     * KEYS * 匹配数据库中所有 key 。</span></span><br><span class="line"><span class="comment">     * KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span></span><br><span class="line"><span class="comment">     * KEYS h*llo 匹配 hllo 和 heeeeello 等。</span></span><br><span class="line"><span class="comment">     * KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。</span></span><br><span class="line"><span class="comment">     * 特殊符号用 \ 隔开。</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> = http://redisdoc.com/database/keys.html&#125;</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="comment">     * 时间复杂度： O(N)， N 为数据库中 key 的数量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String pattern)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查key是否存在</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> = http://redisdoc.com/database/exists.html&#125;</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="comment">     * 时间复杂度： O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">exists</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String redisKey, <span class="type">long</span> expire, TimeUnit timeUnit)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">setStr</span><span class="params">(String key, String value, Long timeout)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置value自增数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">increment</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置不过期的字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">setStr</span><span class="params">(String key, String value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取字符串key的value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getStr</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取字符串key的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getStr</span><span class="params">(String key, Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T, R&gt; List&lt;T&gt; <span class="title function_">mGet</span><span class="params">(List&lt;R&gt; list, Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断member是否在set中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, String value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set 中的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sCard</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set 新增value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sAdd</span><span class="params">(String key, String values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set 移除value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sRem</span><span class="params">(String key, String values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hmSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, Map m)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String field, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">hExists</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String field)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">hGet</span><span class="params">(String key, String hashKey, Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hget</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量获取HASH</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/6/25 16:38</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; List&lt;T&gt; <span class="title function_">hMGet</span><span class="params">(String key, List&lt;String&gt; fields, Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">zAdd</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> score, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zAdd</span><span class="params">(<span class="keyword">final</span> String key, Set&lt;RedisZSetCommands.Tuple&gt; tuples)</span>;</span><br><span class="line"></span><br><span class="line">    Double <span class="title function_">zScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Double <span class="title function_">zIncrBy</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> increment, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zCard</span><span class="params">(<span class="keyword">final</span> String key)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zCount</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; Set&lt;T&gt; <span class="title function_">zRange</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end, Class&lt;T&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRange(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end);</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRevRange(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end);</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max);</span><br><span class="line"></span><br><span class="line">    Set&lt;RedisZSetCommands.Tuple&gt; zRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end);</span><br><span class="line"></span><br><span class="line">    Set&lt;RedisZSetCommands.Tuple&gt; zRevRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end);</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRevRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max);</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRevRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max, <span class="type">long</span> offset, <span class="type">long</span> count);</span><br><span class="line"></span><br><span class="line">    Set&lt;RedisZSetCommands.Tuple&gt; zRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max, <span class="type">long</span> offset, <span class="type">long</span> count);</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zRank</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zRevRank</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> score, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zRem</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zMRem</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;String&gt; fields)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zRemRangeByScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range)</span>;</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="type">byte</span>[]&gt; zRangeByLex(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range);</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zUnionStore</span><span class="params">(<span class="keyword">final</span> String destKey, List&lt;String&gt; sets)</span>;</span><br><span class="line"></span><br><span class="line">    Long <span class="title function_">zInterStore</span><span class="params">(<span class="keyword">final</span> String destKey, <span class="keyword">final</span> <span class="type">byte</span>[]... sets)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; Search <span class="title function_">zSetSearchPage</span><span class="params">(String key, SortTypeEnum sortTypeEnum, <span class="type">int</span> pageSize, <span class="type">int</span> pageIndex, Class&lt;T&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-RedisCacheServiceImpl"><a href="#2-RedisCacheServiceImpl" class="headerlink" title="2. RedisCacheServiceImpl"></a>2. RedisCacheServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> com.weliner.business.config.domain.Search;</span><br><span class="line"><span class="keyword">import</span> com.weliner.business.config.manager.RedisCacheServiceI;</span><br><span class="line"><span class="keyword">import</span> com.weliner.business.config.utils.JsonTool;</span><br><span class="line"><span class="keyword">import</span> com.weliner.business.config.utils.SortTypeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisZSetCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.TimeoutUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ****.coding@gmail.com</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisCacheServiceI</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;String&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;String&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">            Set&lt;<span class="type">byte</span>[]&gt; sets = connection.keys(stringRedisSerializer.serialize(pattern));</span><br><span class="line">            Set&lt;String&gt; keys = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == sets) &#123;</span><br><span class="line">                <span class="keyword">return</span> keys;</span><br><span class="line">            &#125;</span><br><span class="line">            sets.forEach(item -&gt; keys.add(stringRedisSerializer.deserialize(item)));</span><br><span class="line">            <span class="keyword">return</span> keys;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">exists</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.exists(stringRedisSerializer.serialize(key));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String redisKey, <span class="type">long</span> expire, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">long</span> <span class="variable">rawTimeout</span> <span class="operator">=</span> TimeoutUtils.toMillis(expire, timeUnit);</span><br><span class="line">            <span class="keyword">return</span> connection.pExpire(stringRedisSerializer.serialize(redisKey), rawTimeout);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">setStr</span><span class="params">(String key, String value, Long timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.setEx(</span><br><span class="line">                    stringSerializer.serialize(key),</span><br><span class="line">                    timeout,</span><br><span class="line">                    stringSerializer.serialize(value));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">increment</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.incr(stringSerializer.serialize(key));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">setStr</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.set(</span><br><span class="line">                    stringSerializer.serialize(key),</span><br><span class="line">                    stringSerializer.serialize(value));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.execute((RedisCallback&lt;String&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] value = connection.get(</span><br><span class="line">                    stringSerializer.serialize(key));</span><br><span class="line">            <span class="keyword">return</span> (String) stringSerializer.deserialize(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getStr</span><span class="params">(String key, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) redisTemplate.execute((RedisCallback&lt;T&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] bytes = connection.get(stringRedisSerializer.serialize(key));</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == bytes) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisSerializer.deserialize(bytes);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == json) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="keyword">return</span> gson.fromJson(json, clazz);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; List&lt;T&gt; <span class="title function_">mGet</span><span class="params">(List&lt;R&gt; list, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;T&gt;) redisTemplate.execute((RedisCallback&lt;List&lt;T&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">byte</span>[][] bkeys = <span class="keyword">new</span> <span class="title class_">byte</span>[list.size()][];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                bkeys[i] = list.get(i).toString().getBytes();</span><br><span class="line">            &#125;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">            List&lt;<span class="type">byte</span>[]&gt; byteList = connection.mGet(bkeys);</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; byteList.size(); i++) &#123;</span><br><span class="line">                result.add(gson.fromJson(stringRedisSerializer.deserialize(byteList.get(i)), clazz));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.del(</span><br><span class="line">                    stringSerializer.serialize(key));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.sIsMember(stringRedisSerializer.serialize(key),</span><br><span class="line">                    stringRedisSerializer.serialize(value));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sCard</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="keyword">return</span> connection.sCard(stringRedisSerializer.serialize(key));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sAdd</span><span class="params">(String key, String values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> connection.sAdd(stringRedisSerializer.serialize(key), stringRedisSerializer.serialize(values));</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == result || result == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sRem</span><span class="params">(String key, String values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> connection.sRem(stringRedisSerializer.serialize(key), stringRedisSerializer.serialize(values));</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == result || result == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, Map map)</span> &#123;</span><br><span class="line">        redisTemplate.execute((RedisCallback) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, Object&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">            String mapKey;</span><br><span class="line">            Object value;</span><br><span class="line">            Map&lt;<span class="type">byte</span>[], <span class="type">byte</span>[]&gt; hashes = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>(map.size());</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;String, Object&gt; entry = iterator.next();</span><br><span class="line">                mapKey = entry.getKey();</span><br><span class="line">                value = entry.getValue();</span><br><span class="line">                hashes.put(stringRedisSerializer.serialize(mapKey),</span><br><span class="line">                        stringRedisSerializer.serialize(JsonTool.toString(value)));</span><br><span class="line">            &#125;</span><br><span class="line">            connection.hMSet(stringRedisSerializer.serialize(key),</span><br><span class="line">                    hashes</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] bytes = connection.hGet(stringRedisSerializer.serialize(key),</span><br><span class="line">                    stringRedisSerializer.serialize(hashKey));</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == bytes) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stringRedisSerializer.deserialize(bytes);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">hMGet</span><span class="params">(String key, List&lt;String&gt; fields, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (List&lt;T&gt;) redisTemplate.execute((RedisCallback&lt;List&lt;T&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[][] bkeys = <span class="keyword">new</span> <span class="title class_">byte</span>[fields.size()][];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.size(); i++) &#123;</span><br><span class="line">                bkeys[i] = fields.get(i).toString().getBytes();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] keys = stringRedisSerializer.serialize(key);</span><br><span class="line">            List&lt;<span class="type">byte</span>[]&gt; listByte = connection.hMGet(keys, bkeys);</span><br><span class="line">            List&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listByte.size(); i++) &#123;</span><br><span class="line">                result.add(gson.fromJson(stringRedisSerializer.deserialize(listByte.get(i)), clazz));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.0.0</span></span><br><span class="line"><span class="comment">     * 时间复杂度： O(1)</span></span><br><span class="line"><span class="comment">     * 将哈希表 hash 中域 field 的值设置为 value 。</span></span><br><span class="line"><span class="comment">     * 如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行 HSET 操作。</span></span><br><span class="line"><span class="comment">     * 如果域 field 已经存在于哈希表中， 那么它的旧值将被新值 value 覆盖。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: hSet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String field, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keys = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] fields = stringRedisSerializer.serialize(field);</span><br><span class="line">            <span class="type">byte</span>[] values = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.hSet(keys, fields, values);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hExists</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String field)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keys = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] fields = stringRedisSerializer.serialize(field);</span><br><span class="line">            <span class="keyword">return</span> connection.hExists(keys, fields);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">hGet</span><span class="params">(String key, String hashKey, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) redisTemplate.execute((RedisCallback&lt;T&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] bytes = connection.hGet(stringRedisSerializer.serialize(key),</span><br><span class="line">                    stringRedisSerializer.serialize(hashKey));</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisSerializer.deserialize(bytes);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == json) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="keyword">return</span> gson.fromJson(json, clazz);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(M*log(N))， N 是有序集的基数， M 为成功添加的新成员的数量。 将一个或多个 member</span></span><br><span class="line"><span class="comment">     * 元素及其 score 值加入到有序集 key 当中。 如果某个 member 已经是有序集的成员，那么更新这个 member 的 score</span></span><br><span class="line"><span class="comment">     * 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。 score 值可以是整数值或双精度浮点数。 如果 key</span></span><br><span class="line"><span class="comment">     * 不存在，则创建一个空的有序集并执行 ZADD 操作。 当 key 存在但不是有序集类型时，返回一个错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">zAdd</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> score, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) redisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">zAdd</span> <span class="operator">=</span> connection.zAdd(keyByte, score, valueByte);</span><br><span class="line">            <span class="keyword">if</span> (zAdd == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="comment">// 兼容value、score相同的情况也会返回false</span></span><br><span class="line">                <span class="type">Double</span> <span class="variable">zScore</span> <span class="operator">=</span> connection.zScore(keyByte, valueByte);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != zScore) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> zAdd;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zAdd</span><span class="params">(<span class="keyword">final</span> String key, Set&lt;RedisZSetCommands.Tuple&gt; tuples)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zAdd(keyByte, tuples);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(1) 返回有序集 key 中，成员 member 的 score 值。 如果 member 元素不是有序集</span></span><br><span class="line"><span class="comment">     * key 的成员，或 key 不存在，返回 nil 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Double) redisTemplate.execute((RedisCallback&lt;Double&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.zScore(keyByte, valueByte);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(log(N)) 为有序集 key 的成员 member 的 score 值加上增量 increment 。</span></span><br><span class="line"><span class="comment">     * 可以通过传递一个负数值 increment ，让 score 减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的</span></span><br><span class="line"><span class="comment">     * score 值减去 5 。 当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member</span></span><br><span class="line"><span class="comment">     * 等同于 ZADD key increment member 。 当 key 不是有序集类型时，返回一个错误。 score 值可以是整数值或双精度浮点数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> increment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zIncrBy</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> increment, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Double) redisTemplate.execute((RedisCallback&lt;Double&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.zIncrBy(keyByte, increment, valueByte);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(1) 返回有序集 key 的基数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zCard</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">RedisCallback</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                        = redisTemplate.getStringSerializer();</span><br><span class="line">                <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">                <span class="keyword">return</span> connection.zCard(keyByte);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.0.0 时间复杂度: O(log(N))， N 为有序集的基数。 返回有序集 key 中， score 值在 min 和 max</span></span><br><span class="line"><span class="comment">     * 之间(默认包括 score 值等于 min 或 max )的成员的数量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> range</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zCount</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">RedisCallback</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                        = redisTemplate.getStringSerializer();</span><br><span class="line">                <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">                <span class="keyword">return</span> connection.zCount(keyByte, range);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">zRange</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;T&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;T&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            Set&lt;<span class="type">byte</span>[]&gt; bytes = connection.zRange(keyByte, start, end);</span><br><span class="line">            Set&lt;T&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(bytes.size());</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != bytes) &#123;</span><br><span class="line">                <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().disableHtmlEscaping().create();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">byte</span>[] b : bytes) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> stringRedisSerializer.deserialize(b);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">null</span> != value) &#123;</span><br><span class="line">                        set.add(gson.fromJson(value.toString(), clazz));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(log(N)+M)， N 为有序集的基数，而 M 为结果集的基数。 返回有序集 key</span></span><br><span class="line"><span class="comment">     * 中，指定区间内的成员。 其中成员的位置按 score 值递增(从小到大)来排序。 具有相同 score 值的成员按字典序(lexicographical</span></span><br><span class="line"><span class="comment">     * order )来排列。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRange(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRange(keyByte, start, end);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(log(N)+M)， N 为有序集的基数，而 M 为结果集的基数。 返回有序集 key</span></span><br><span class="line"><span class="comment">     * 中，指定区间内的成员。 其中成员的位置按 score 值递减(从大到小)来排列。 具有相同 score 值的成员按字典序的逆序(reverse</span></span><br><span class="line"><span class="comment">     * lexicographical order)排列。 除了成员按 score 值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE</span></span><br><span class="line"><span class="comment">     * key start stop [WITHSCORES] 命令一样。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRevRange(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRevRange(keyByte, start, end);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.0.5 时间复杂度: O(log(N)+M)， N 为有序集的基数， M 为被结果集的基数。 返回有序集 key 中，所有</span></span><br><span class="line"><span class="comment">     * score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 具有相同</span></span><br><span class="line"><span class="comment">     * score 值的成员按字典序(lexicographical order)来排列(该属性是有序集提供的，不需要额外的计算)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRangeByScore(keyByte, min, max);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引区间获取元素</span></span><br><span class="line"><span class="comment">     * score 值递增(从小到大)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;RedisZSetCommands.Tuple&gt; zRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;RedisZSetCommands.Tuple&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;RedisZSetCommands.Tuple&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRangeWithScores(keyByte, start, end);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引区间获取元素</span></span><br><span class="line"><span class="comment">     * score 值递增(从大到小)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;RedisZSetCommands.Tuple&gt; zRevRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> start, <span class="keyword">final</span> <span class="type">long</span> end) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;RedisZSetCommands.Tuple&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;RedisZSetCommands.Tuple&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRevRangeWithScores(keyByte, start, end);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.2.0 时间复杂度: O(log(N)+M)， N 为有序集的基数， M 为结果集的基数。 返回有序集 key 中， score</span></span><br><span class="line"><span class="comment">     * 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。 具有相同</span></span><br><span class="line"><span class="comment">     * score 值的成员按字典序的逆序(reverse lexicographical order )排列。 除了成员按 score</span></span><br><span class="line"><span class="comment">     * 值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE key min max</span></span><br><span class="line"><span class="comment">     * [WITHSCORES] [LIMIT offset count] 命令一样。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRevRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRevRangeByScore(keyByte, min, max);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.2.0 时间复杂度: O(log(N)+M)， N 为有序集的基数， M 为结果集的基数。 返回有序集 key 中， score</span></span><br><span class="line"><span class="comment">     * 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。 具有相同</span></span><br><span class="line"><span class="comment">     * score 值的成员按字典序的逆序(reverse lexicographical order )排列。 除了成员按 score</span></span><br><span class="line"><span class="comment">     * 值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE key min max</span></span><br><span class="line"><span class="comment">     * [WITHSCORES] [LIMIT offset count] 命令一样。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRevRangeByScore(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max, <span class="type">long</span> offset, <span class="type">long</span> count) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRevRangeByScore(keyByte, min, max, offset, count);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;RedisZSetCommands.Tuple&gt; zRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> min, <span class="keyword">final</span> <span class="type">double</span> max, <span class="type">long</span> offset, <span class="type">long</span> count) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;RedisZSetCommands.Tuple&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;RedisZSetCommands.Tuple&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRangeByScoreWithScores(keyByte, min, max, offset, count);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.0.0 时间复杂度: O(log(N)) 返回有序集 key 中成员 member 的排名。其中有序集成员按 score</span></span><br><span class="line"><span class="comment">     * 值递增(从小到大)顺序排列。 排名以 0 为底，也就是说， score 值最小的成员排名为 0 。 使用 ZREVRANK key member</span></span><br><span class="line"><span class="comment">     * 命令可以获得成员按 score 值递减(从大到小)排列的排名。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zRank</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.zRank(keyByte, valueByte);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.0.0 时间复杂度: O(log(N)) 返回有序集 key 中成员 member 的排名。其中有序集成员按 score</span></span><br><span class="line"><span class="comment">     * 值递减(从大到小)排序。 排名以 0 为底，也就是说， score 值最大的成员排名为 0 。 使用 ZRANK key member 命令可以获得成员按</span></span><br><span class="line"><span class="comment">     * score 值递增(从小到大)排列的排名。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zRevRank</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">double</span> score, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            RedisSerializer&lt;String&gt; stringRedisSerializer</span><br><span class="line">                    = redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.zRevRank(keyByte, valueByte);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(M*log(N))， N 为有序集的基数， M 为被成功移除的成员的数量。 移除有序集 key</span></span><br><span class="line"><span class="comment">     * 中的一个或多个成员，不存在的成员将被忽略。 当 key 存在但不是有序集类型时，返回一个错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zRem</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="type">byte</span>[] valueByte = stringRedisSerializer.serialize(value);</span><br><span class="line">            <span class="keyword">return</span> connection.zRem(keyByte, valueByte);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度: O(M*log(N))， N 为有序集的基数， M 为被成功移除的成员的数量。 移除有序集 key</span></span><br><span class="line"><span class="comment">     * 中的一个或多个成员，不存在的成员将被忽略。 当 key 存在但不是有序集类型时，返回一个错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields 删除多数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zMRem</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;String&gt; fields)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keys = stringRedisSerializer.serialize(key);</span><br><span class="line">            List&lt;<span class="type">byte</span>[]&gt; values = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(fields.size());</span><br><span class="line">            <span class="keyword">for</span> (String field : fields) &#123;</span><br><span class="line">                <span class="type">byte</span>[] value = stringRedisSerializer.serialize(field);</span><br><span class="line">                values.add(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[][] valueArr = <span class="keyword">new</span> <span class="title class_">byte</span>[values.size()][];</span><br><span class="line">            <span class="keyword">return</span> connection.zRem(keys,</span><br><span class="line">                    values.toArray(valueArr));</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 1.2.0 时间复杂度： O(log(N)+M)， N 为有序集的基数，而 M 为被移除成员的数量。 移除有序集 key 中，所有</span></span><br><span class="line"><span class="comment">     * score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。 自版本2.1.6开始， score 值等于 min 或 max</span></span><br><span class="line"><span class="comment">     * 的成员也可以不包括在内，详情请参见 ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span></span><br><span class="line"><span class="comment">     * 命令。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> range</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zRemRangeByScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRemRangeByScore(keyByte, range);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.8.9 时间复杂度：O(log(N)+M)， 其中 N 为有序集合的元素数量， 而 M 则是命令返回的元素数量。 如果 M</span></span><br><span class="line"><span class="comment">     * 是一个常数（比如说，用户总是使用 LIMIT 参数来返回最先的 10 个元素）， 那么命令的复杂度也可以看作是 O(log(N)) 。</span></span><br><span class="line"><span class="comment">     * 当有序集合的所有成员都具有相同的分值时， 有序集合的元素会根据成员的字典序（lexicographical ordering）来进行排序，</span></span><br><span class="line"><span class="comment">     * 而这个命令则可以返回给定的有序集合键 key 中， 值介于 min 和 max 之间的成员。 如果有序集合里面的成员带有不同的分值，</span></span><br><span class="line"><span class="comment">     * 那么命令返回的结果是未指定的（unspecified）。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> range</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="type">byte</span>[]&gt; zRangeByLex(<span class="keyword">final</span> String key, <span class="keyword">final</span> RedisZSetCommands.Range range) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Set&lt;<span class="type">byte</span>[]&gt;) redisTemplate.execute((RedisCallback&lt;Set&lt;<span class="type">byte</span>[]&gt;&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] keyByte = stringRedisSerializer.serialize(key);</span><br><span class="line">            <span class="keyword">return</span> connection.zRangeByLex(keyByte, range);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本：&gt;= 2.0.0 时间复杂度: O(N)+O(M log(M))， N 为给定有序集基数的总和， M 为结果集的基数。</span></span><br><span class="line"><span class="comment">     * 计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。</span></span><br><span class="line"><span class="comment">     * 默认情况下，结果集中某个成员的 score 值是所有给定集下该成员 score 值之 和 。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sets</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zUnionStore</span><span class="params">(<span class="keyword">final</span> String destKey, List&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] destKeyByte = stringRedisSerializer.serialize(destKey);</span><br><span class="line">            <span class="type">byte</span>[][] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[sets.size()][];</span><br><span class="line">            <span class="keyword">return</span> connection.zUnionStore(destKeyByte, sets.parallelStream()</span><br><span class="line">                    .map(val -&gt; stringRedisSerializer.serialize(val)).collect(Collectors.toList()).toArray(arr));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可用版本： &gt;= 2.0.0 时间复杂度: O(N*K)+O(M*log(M))， N 为给定 key 中基数最小的有序集， K 为给定有序集的数量， M</span></span><br><span class="line"><span class="comment">     * 为结果集的基数。 计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到</span></span><br><span class="line"><span class="comment">     * destination 。 默认情况下，结果集中某个成员的 score 值是所有给定集下该成员 score 值之和.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sets</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">zInterStore</span><span class="params">(<span class="keyword">final</span> String destKey, <span class="keyword">final</span> <span class="type">byte</span>[]... sets)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; &#123;</span><br><span class="line">            <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                    <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">            <span class="type">byte</span>[] destKeyByte = stringRedisSerializer.serialize(destKey);</span><br><span class="line">            <span class="keyword">return</span> connection.zInterStore(destKeyByte, sets);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset分页方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key          缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortTypeEnum 排序方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize     分页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageIndex    页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz        元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Search <span class="title function_">zSetSearchPage</span><span class="params">(String key, SortTypeEnum sortTypeEnum, <span class="type">int</span> pageSize, <span class="type">int</span> pageIndex, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">Search</span> <span class="variable">search</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Search</span>();</span><br><span class="line">        search.setPageIndex(pageIndex);</span><br><span class="line">        search.setPageSize(pageSize);</span><br><span class="line">        search.buildPage();</span><br><span class="line">        <span class="keyword">if</span> (pageSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> search;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">RedisSerializer</span> <span class="variable">stringRedisSerializer</span></span><br><span class="line">                <span class="operator">=</span> redisTemplate.getStringSerializer();</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="comment">// 获取总条数</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalCount</span> <span class="operator">=</span> zCount(key, RedisZSetCommands.Range.unbounded());</span><br><span class="line">        <span class="comment">// 总页数</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">totalPageCount</span> <span class="operator">=</span> totalCount / pageSize;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">pageNum</span> <span class="operator">=</span> (totalCount % pageSize) == <span class="number">0</span> ? totalPageCount : totalPageCount + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 判断是否需要去执行，当总页数&lt;取数页时不需要去执行</span></span><br><span class="line">        <span class="keyword">if</span> (pageNum &gt;= pageIndex) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> search.getOffset();</span><br><span class="line">            <span class="comment">// 与数据库不同，redis从0开始，第二个参数是结束的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> offset + search.getPageSize() - <span class="number">1</span>;</span><br><span class="line">            Set&lt;<span class="type">byte</span>[]&gt; zSetRange = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (sortTypeEnum == SortTypeEnum.DESC) &#123;</span><br><span class="line">                zSetRange = zRevRange(key, offset, endIndex);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                zSetRange = zRange(key, offset, endIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            list = (Set&lt;T&gt;) Optional.ofNullable(zSetRange).orElseGet(() -&gt; Collections.emptySet()</span><br><span class="line">            ).stream().filter(Objects::nonNull).map(i -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> gson.fromJson((String) stringRedisSerializer.deserialize(i), clazz);</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line">            search.setTotal(totalCount.intValue());</span><br><span class="line">            search.setResult(Arrays.asList(list));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal</title>
      <link href="/Java/threadlocal/"/>
      <url>/Java/threadlocal/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>ThreadLocal介绍</p></blockquote> <span id="more"></span> <h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="ThreadLocal是什么"><a href="#ThreadLocal是什么" class="headerlink" title="ThreadLocal是什么"></a>ThreadLocal是什么</h3><ul><li>ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问（通过get和set方法访问）时能保证各个线程的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程上下文。<h3 id="ThreadLocal的作用"><a href="#ThreadLocal的作用" class="headerlink" title="ThreadLocal的作用"></a>ThreadLocal的作用</h3></li><li>多线程访问同一个共享变量的时候容易出现并发问题，特别是多个线程对一个变量进行写入的时候，为了保证线程安全，一般使用者在访问共享变量的时候需要进行额外的同步措施才能保证线程安全性。ThreadLocal是除了加锁这种同步方式之外的一种保证一种规避多线程访问出现线程不安全的方法，当我们在创建一个变量后，如果每个线程对其进行访问的时候访问的都是线程自己的变量这样就不会存在线程不安全问题。<h2 id="ThreadLocal基本使用"><a href="#ThreadLocal基本使用" class="headerlink" title="ThreadLocal基本使用"></a>ThreadLocal基本使用</h2><h3 id="ThreadLocal的常见方法"><a href="#ThreadLocal的常见方法" class="headerlink" title="ThreadLocal的常见方法"></a>ThreadLocal的常见方法</h3><table><thead><tr><th>方法声明</th><th>方法</th></tr></thead><tbody><tr><td>ThreadLocal()</td><td>创建ThreadLocal对象</td></tr><tr><td>public void set(T value)</td><td>设置当前线程绑定的局部变量</td></tr><tr><td>public T get()</td><td>获取当前线程绑定的局部变量</td></tr><tr><td>public void remove()</td><td>移除当前线程绑定的局部变量</td></tr></tbody></table><h3 id="Show-Code"><a href="#Show-Code" class="headerlink" title="Show Code"></a>Show Code</h3></li><li>未注入ThreadLocal()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal01</span> &#123;</span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 未引入ThreadLocal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLocal01</span> <span class="variable">threadLocal01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal01</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                threadLocal01.setContent(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t  &quot;</span> + threadLocal01.getContent());</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">3</span>  <span class="number">4</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>的数据</span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>引入ThreadLocal<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal01</span> &#123;</span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入ThreadLocal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadLocal01</span> <span class="variable">threadLocal01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal01</span>();</span><br><span class="line">        ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                threadLocal.set(Thread.currentThread().getName() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t  &quot;</span> + threadLocal.get());</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>执行结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>的数据</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>的数据</span><br></pre></td></tr></table></figure></li><li>通过 set 将变量绑定到当前线程中，然后 get 获取当前线程绑定的变量，也就是当前线程只能获取线程线程存储的对象。<h2 id="ThreadLocal与Synchronized的区别"><a href="#ThreadLocal与Synchronized的区别" class="headerlink" title="ThreadLocal与Synchronized的区别"></a>ThreadLocal与Synchronized的区别</h2></li><li>虽然ThreadLocal模式与Synchronized关键字都用于处理多线程并发访问变量的问题，不过两者处理问题的角度和思路不同。</li></ul><table><thead><tr><th></th><th>Synchronized</th><th>ThreadLocal</th></tr></thead><tbody><tr><td>原理</td><td>同步机制采用 以空间换时间 的方式，只提供了一份变量，让不同的线程排队访问</td><td>ThreadLocal采用以空间换时间的概念，为每个线程都提供一份变量副本，从而实现同时访问而互不干扰</td></tr><tr><td>侧重点</td><td>多个线程之间访问资源的同步</td><td>多线程中让每个线程之间的数据相互隔离</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GateWay总结</title>
      <link href="/Java/gateway/"/>
      <url>/Java/gateway/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>使用Nacos实现服务的注册与发现</li><li>消费者访问指定路径，gateway会根据配置信息路由到指定服务下的指定路径</li></ul> <span id="more"></span> <h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--gateway 网关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>服务提供方将自己注册到Nacos；</li><li>在gateway子项目配置文件里配置路径；</li><li>访问指定路径时实现路由功能。</li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">xxxxxx-ee03-4421-8ba5-d4d7a9d25caa</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">management:</span></span><br><span class="line">            <span class="attr">context-path:</span> <span class="string">$&#123;server.servlet.context-path&#125;/provider</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">test_route</span> <span class="comment"># 路由测试</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://developer-provider</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/v1/gateway/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=3</span> <span class="comment"># StripPrefix参数表示在将请求发送到下游之前从请求中剥离的路径个数</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PreserveHostHeader</span> <span class="comment"># 防止host被修改为localhost</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-dev.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问localhost:17788/api/v1/gateway/test会被路由到localhost:27788/provider/test</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SaaS应用管理文档</title>
      <link href="/Java/saas_app_doc/"/>
      <url>/Java/saas_app_doc/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>ACL：基于角色级别的权限控制</p></blockquote> <span id="more"></span> <p>ACL（Access Control List）：将系统的各种权限直接授予具体的用户。抽象来说，为每个用户维护了单独的权限列表，当需要分配权限、收回权限时，需要修改对应用户的权限信息。</p><h3 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. 数据库设计</h3><ul><li>opn_app(应用表)：包含应用名称、应用状态、排序；</li><li>opn_app_clazz(应用分类表)：包含分类名称、分类状态、排序；</li><li>opn_app_clazz_ref_app(应用分类关联表)：应用id、分类id；</li><li>opn_app_detail(应用详情表)：维护信息、应用图片、应用属性、网站域名、网站地址、网站额外参数等。</li></ul><h3 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2. 数据库设计"></a>2. 数据库设计</h3><ul><li>按照原型图分为应用清单和应用维护两部分</li><li>应用清单<ol><li>应用清单：传入分页信息，获取并返回所有应用；</li><li>新增应用：传入应用信息，（在进入manager层之前应将数据对象准备好，不然开启事务后数据库压力大）在manager层开启事务，同步新增opn_app、opn_app_detail和opn_app_clazz_ref_app表；先INSERT opn_app表，id为自动增长（插入后，自动增长的id会包装到对象里）；然后INSERT opn_app_detail表，id为自动增长，appid为opn_app自增长的id；最后INSERT opn_app_clazz_ref_app表，插入appId和clazzId（默认为0）。返回操作状态码；</li><li>更新应用：与新增应用接口类似，传入封装对象中塞入了应用id，不同的是只需要更新opn_app、opn_app_detail两张表，先根据传入的id和信息更新opn_app表，然后根据id查询出appId为id的opn_app_detail对象，并根据传入的信息更新它；最后返回状态码。</li><li>应用详情：传入应用id，根据应用id查询opn_app表和opn_app_detail表（appId），返回状态码以及封装的对象。</li></ol></li><li>应用维护<ol><li>分类清单：获取分类信息，查询opn_app_clazz表中所有信息，返回list。</li><li>应用列表：根据clazzId查询分类下的应用信息，共需查询opn_app_clazz_ref_app、opn_app和opn_app_detail表。先根据clazzId，查询出opn_app_clazz_ref_app表内的appIds；然后遍历appIds依次查询opn_app和opn_app_detail表，返回list。</li><li>应用详情：传入应用id，查询opn_app和opn_app_detail表，返回应用名称、应用状态、维护信息、排序等信息。</li><li>修改分类：传入应用id和clazzId，更新opn_app_clazz_ref_app表，返回操作状态码。</li><li>详情编辑：传入包装类，根据传入的对象更新opn_app和opn_app_detail表，返回操作结果。</li></ol></li></ul><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><pre><code> 1. 数据库设计部分  * 表名：要注意前缀，同一模块的表应该相邻；简明知意，不要使用容易混淆的单词，必要时可使用别名，例如应用分类关联表，“分类”使用常用单词标记（class别名clazz，不应用sort表明类别，易于排序混淆）；  * 表字段：每张表格在设计字段的时候都应该具有五个基础字段（id,is_enable,create_time,update_time,update_usr_id）主键id；is_enable该行数据是否有效，0无效，1有效，设计为bit类型，默认值为b&#39;1&#39;；create_time,update_time创建时间和更新时间，存放时间戳，设计为bigint类型，长度为20。注意：在一些表示类型的字段上，一般设计为tinyint类型长度为1，但代码生成器会将该字段识别为Boolean类型，为了应对经常变化的业务需求，一般将其改为Integer类型。 2. 接口设计部分 * Controller层供前端调用，接口分布应与原型相对应； * 接口数量约少越好，插入、更新可以在一个接口里实现； * Controller层返回值类型不重要，可以统一写为Object； * Controller层只return service层的执行结果，返回结果包装可在service执行。</code></pre><h3 id="4-重点"><a href="#4-重点" class="headerlink" title="4. 重点"></a>4. 重点</h3><ol><li><p>service层只做参数校验，多表操作开启事务在manager层做；</p></li><li><p>在新增、更新和搜索等需要在文本框内输入的接口，在service层需要做防止xss注入操作（hutool：htmlFilter()方法）；</p></li><li><p>使用mybatis-plus插件，更新和插入的操作应当使用BaseMapper自带的insert和update，因为这样可以应对多变的需求及减少bug；</p></li><li><p>使用mybatis-plus插件向数据库插入一条id自增的数据，如果在生成代码阶段没有设置id为自动增长，那么插入数据库的id字段将会为很长的一段雪花值，是因为实体类id字段上没有正确添加注解，mybatis-plus默认为雪花值id；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分类id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">   <span class="keyword">private</span> Long id;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SaaS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用开发过程中的注意事项</title>
      <link href="/Java/matters_needing_attention/"/>
      <url>/Java/matters_needing_attention/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>持续更新…</p></blockquote> <span id="more"></span> <ol><li>不能直接返回实体类给前端！！！</li><li>内部服务在设计DTO模型时应充分考虑清楚，一旦确定好字段后，只能新增字段，不可修改字段！！！</li><li>原型图不是最终要开发的样子，应发散思维，充分考虑业务场景中的业务执行逻辑！！！</li><li>重要的操作应记录日志！！！</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业微信群机器人发送消息</title>
      <link href="/Java/wx_work_message/"/>
      <url>/Java/wx_work_message/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>在企业微信群内发送特定消息并@指定的成员</li></ul> <span id="more"></span> <h3 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h3><ul><li><a href="https://work.weixin.qq.com/api/doc/90000/90136/91770#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA">如何使用群机器人</a><h3 id="可实现功能"><a href="#可实现功能" class="headerlink" title="可实现功能"></a>可实现功能</h3></li></ul><ol><li>发送文字消息</li><li>发送图片消息</li><li>发送图文消息</li><li>发送卡片消息</li><li>发送文件消息<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3></li></ol><ul><li>采用模板模式<h4 id="封装消息体"><a href="#封装消息体" class="headerlink" title="封装消息体"></a>封装消息体</h4></li><li>将各类消息DTO的公共部分抽取成AbstractMessageDto（第一层）、AbstractWxWorkDto（第二层），AbstractWxWorkDto继承AbstractMessageDto，各类消息DTO继承AbstractWxWorkDto；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractMessageDto</span></span><br><span class="line"><span class="keyword">private</span> Long sendTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String messageId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String resultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String resultMessage;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractWxWorkDto</span></span><br><span class="line"><span class="comment">// 消息类型</span></span><br><span class="line"><span class="keyword">private</span> String msgtype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; mentioned_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; mentioned_mobile_list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(Object content)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">valid</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定义请求"><a href="#定义请求" class="headerlink" title="定义请求"></a>定义请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SendHttpClient</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_CONTENT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;application/json; charset=utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; String <span class="title function_">doPost</span><span class="params">(String url, K jsonParam, Map&lt;String, String&gt; headers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonParam != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> gson.toJson(jsonParam);</span><br><span class="line">            <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.createPost(url)</span><br><span class="line">                    .header(Header.CONTENT_TYPE, headers.get(Header.CONTENT_TYPE.getValue()))</span><br><span class="line">                    .body(jsonStr)</span><br><span class="line">                    .timeout(<span class="number">20000</span>)</span><br><span class="line">                    .executeAsync();</span><br><span class="line">            <span class="keyword">return</span> response.body();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; T <span class="title function_">post</span><span class="params">(String url, K jsonParam, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> post(url, jsonParam, clazz, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; T <span class="title function_">post</span><span class="params">(String url, K jsonParam, Class&lt;T&gt; clazz, Map&lt;String, String&gt; header)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        header = header == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() : header;</span><br><span class="line">        <span class="keyword">if</span> (!header.containsKey(Header.CONTENT_TYPE.toString())) &#123;</span><br><span class="line">            header.put(Header.CONTENT_TYPE.toString(), DEFAULT_CONTENT_TYPE);</span><br><span class="line">        &#125;</span><br><span class="line">        json = doPost(url, jsonParam, header);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">T</span> <span class="variable">res</span> <span class="operator">=</span> json == <span class="literal">null</span> ? <span class="literal">null</span> : gson.fromJson(json, clazz);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消息发送模板"><a href="#消息发送模板" class="headerlink" title="消息发送模板"></a>消息发送模板</h4></li><li>SendTemplate 泛型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SendTemplate</span>&lt;T <span class="keyword">extends</span> <span class="title class_">AbstractMessageDto</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">send</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>WxWorkSendTemplate extends SendTemplate<AbstractWxWorkDto><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WX_URL</span> <span class="operator">=</span> <span class="string">&quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=%s&amp;debug=1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AbstractWxWorkDto <span class="title function_">send</span><span class="params">(AbstractWxWorkDto abstractWxWorkDto)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isNull(abstractWxWorkDto)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;body is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isEmail(abstractWxWorkDto.getMsgtype())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;msgType is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(WX_URL, <span class="string">&quot;xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx&quot;</span>);</span><br><span class="line">            <span class="type">WxWorkResultDto</span> <span class="variable">result</span> <span class="operator">=</span> SendHttpClient.post(url, abstractWxWorkDto,</span><br><span class="line">                    WxWorkResultDto.class);</span><br><span class="line">            log.info(<span class="string">&quot;result &#123;&#125; &quot;</span>, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(abstractWxWorkDto));</span><br><span class="line">            log.info(<span class="string">&quot;result &#123;&#125; &quot;</span>, result);</span><br><span class="line">            abstractWxWorkDto.setSendTime(System.currentTimeMillis());</span><br><span class="line">            abstractWxWorkDto.setResultCode(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;通知失败 &#123;&#125;&quot;</span>, abstractWxWorkDto);</span><br><span class="line">            abstractWxWorkDto.setResultCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> abstractWxWorkDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文字消息实例（markdown）"><a href="#文字消息实例（markdown）" class="headerlink" title="文字消息实例（markdown）"></a>文字消息实例（markdown）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxWorkMarkdownDto</span> <span class="keyword">extends</span> <span class="title class_">AbstractWxWorkDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; markdown;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(Object content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isNull(content)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;body value is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        markdown = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        markdown.put(<span class="string">&quot;content&quot;</span>, content.toString());</span><br><span class="line">        build();</span><br><span class="line">        valid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setMsgtype(<span class="string">&quot;markdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">valid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.markdown.containsKey(<span class="string">&quot;content&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;body key is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Validator.isEmail(markdown.get(<span class="string">&quot;content&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;body value is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>测试：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;markdown&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setMarkdown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WxWorkMarkdownDto</span> <span class="variable">wxWorkMarkdownDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WxWorkMarkdownDto</span>();</span><br><span class="line">        wxWorkMarkdownDto.setContent(<span class="string">&quot;实时新增用户反馈&lt;font color=\&quot;warning\&quot;&gt;132例&lt;/font&gt;，请相关同事注意。\\n\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;         &gt;类型:&lt;font color=\&quot;comment\&quot;&gt;用户反馈&lt;/font&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;         &gt;普通用户反馈:&lt;font color=\&quot;comment\&quot;&gt;117例&lt;/font&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;         &gt;VIP用户反馈:&lt;font color=\&quot;comment\&quot;&gt;15例&lt;/font&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;         &gt;[嘿凡博客](iiii.host)&quot;</span>);</span><br><span class="line">        wxWorkSendTemplate.send(wxWorkMarkdownDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础数据管理之版本管理模块-数据版本</title>
      <link href="/Java/base_data_management/"/>
      <url>/Java/base_data_management/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>记一次数据版本管理</p></blockquote> <span id="more"></span> <h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计<img src="https://z3.ax1x.com/2021/07/22/W0i9QU.png" alt="接口设计"></h3><h4 id="接口逻辑"><a href="#接口逻辑" class="headerlink" title="接口逻辑"></a>接口逻辑</h4><ol><li>数据发布接口：开启事务，更新基础表的larger_version为基础表MAX(larger)+1、将基础数据表中的数据copy到发布版本表中、插入一条数据到版本表、获取更新数据插入到更新版本日志表。</li><li>历史版本列表接口：分页查询版本表，返回早于当前使用版本发布时间的列表。</li><li>查询历史版本信息：前端传入大版本号，后端校验版本号后查询正式版本中的大版本号数据，使用<a href="https://www.hutool.cn/docs/#/core/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E6%A0%91%E7%BB%93%E6%9E%84/%E6%A0%91%E7%BB%93%E6%9E%84%E5%B7%A5%E5%85%B7-TreeUtil?id=%e4%bb%8b%e7%bb%8d">HuTool工具类</a>返回树形结构。</li><li>切换使用版本接口：开启事务，将版本表中的“是否为当前使用版本”字段全部设置为 ++false++，再根据前端出入的版本id，设置那一列为 ++true++。</li><li>检查版本更新接口：根据版本表中的当前使用的版本号与表中最新的版本号做对比，一样则返回 ++true++，反之 ++false++。</li><li>展示最新版本详情：查询版本表中最新的版本数据，使用<a href="https://www.hutool.cn/docs/#/core/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/%E6%A0%91%E7%BB%93%E6%9E%84/%E6%A0%91%E7%BB%93%E6%9E%84%E5%B7%A5%E5%85%B7-TreeUtil?id=%e4%bb%8b%e7%bb%8d">HuTool工具类</a>返回树形结构。</li><li>展示当前版本分类详情：前端传入clazzId，查询当前使用版本的所有数据，根据clazzId关联的treeTop，来取这颗树的某一分支。</li><li>展示当前版本的信息：查询当前使用版本的所有数据，返回树形结构。</li></ol><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计<img src="https://z3.ax1x.com/2021/07/22/W0K4FU.png" alt="数据库设计"></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次HuTool树操作</title>
      <link href="/Java/hutool_tree/"/>
      <url>/Java/hutool_tree/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>目的是从一棵大树中取出一颗子树</li><li>使用HuTool工具类中的树形结构</li></ul> <span id="more"></span> <h3 id="图解数据库存储结构"><a href="#图解数据库存储结构" class="headerlink" title="图解数据库存储结构"></a>图解数据库存储结构</h3><p><a href="https://imgtu.com/i/fG7Yzq"><img src="https://z3.ax1x.com/2021/08/10/fG7Yzq.md.png" alt="fG7Yzq.md.png"></a></p><ul><li>数据库中有类似于id1、2的多个根节点</li><li>每个根节点下有许多子节点<h3 id="根本问题"><a href="#根本问题" class="headerlink" title="根本问题"></a>根本问题</h3></li><li>使用HuTool工具将查询到的list转换为tree<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置</span></span><br><span class="line">        <span class="type">TreeNodeConfig</span> <span class="variable">treeNodeConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNodeConfig</span>();</span><br><span class="line">        <span class="comment">// 自定义属性名 都要默认值的</span></span><br><span class="line">        treeNodeConfig.setWeightKey(<span class="string">&quot;sortNum&quot;</span>);</span><br><span class="line">        treeNodeConfig.setIdKey(<span class="string">&quot;xxxxId&quot;</span>);</span><br><span class="line">        treeNodeConfig.setDeep(<span class="number">5</span>);</span><br><span class="line">        treeNodeConfig.setParentIdKey(<span class="string">&quot;parentId&quot;</span>);</span><br><span class="line">        treeNodeConfig.setNameKey(<span class="string">&quot;children&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.转树</span></span><br><span class="line">        List&lt;Tree&lt;Long&gt;&gt; build = TreeUtil.build(zzzzs, treeTop,</span><br><span class="line">                treeNodeConfig, (zzzz, tree) -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 也可以使用 tree.setId(object.getId());等一些默认值</span></span><br><span class="line">                    tree.putExtra(<span class="string">&quot;xxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                    tree.putExtra(<span class="string">&quot;xxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                    tree.putExtra(<span class="string">&quot;xxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">    tree.putExtra(<span class="string">&quot;xxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                    tree.putExtra(<span class="string">&quot;xxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                    tree.putExtra(<span class="string">&quot;sortNum&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                    tree.putExtra(<span class="string">&quot;xxxxx&quot;</span>, zzzz.getXxxxx());</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>treeTop：设置以treeTop为根节点来查询</li><li>例如需要查询id为2这颗子树，treeTop设置为2，查询的结果中不会包含id为2这个节点<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3></li><li>解决方法就是新建一个vo，属性包含子树展示的属性和List&lt;Tree<Long>&gt; tree；</li><li>查一遍id为2的数据root，使用BeanUtils.copyProperties()方法，将root的值copy到vo里，然后将查询到的子树塞入vo的tree</li><li>返回vo</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HuTool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次后端处理前端拖拽排序</title>
      <link href="/Java/rearrange/"/>
      <url>/Java/rearrange/</url>
      
        <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><ul><li>新需求，之前是填写数字更改排序（行数多，用户体验差）；</li><li>因为在之前的原型图上有涉及到排序的接口，所以在设计表阶段就考虑到添加排序字段“<em>sort_position</em>”（后来也有用到“<em>sort_num</em>”，大差不差，无关紧要）；</li><li>拿到需求，不急着动手，先分析一波：</li><li>前端传入的应该是一个id数组，后端根据传入数组中id对应的下标来单表更新数据库中的排序字段；</li><li>OK，不难，一个SQL就能解决。</li></ul> <span id="more"></span> <h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>确定前端传入的参数类型；</li><li>判断Dao层该接收什么类型的参数；</li><li>前端传入id数组；Dao层接收Bean列表。<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><blockquote><p>为压缩篇幅，省略了Service层和Dao层的接口，开发过程中一定不能省略，规范编程，从我做起！！！</p></blockquote></li></ul><ul><li>Controller层<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入id列表，更新排序信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> opnMaintenanceParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> HiF</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2021/7/5 10:48</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/edit/sort&quot;)</span></span><br><span class="line">    <span class="meta">@MonitorAnnotation(auth = false)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">editMaintenanceDetailSort</span><span class="params">(<span class="meta">@RequestBody</span> OpnMaintenanceParam opnMaintenanceParam,</span></span><br><span class="line"><span class="params">                                        HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                        HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> opnAppServiceI.editMaintenanceDetailSort(opnMaintenanceParam, request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>Service层<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">editMaintenanceDetailSort</span><span class="params">(OpnMaintenanceParam opnMaintenanceParam,</span></span><br><span class="line"><span class="params">                                            HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                            HttpServletResponse response)</span> &#123;</span><br><span class="line">        List&lt;Long&gt; appIds = opnMaintenanceParam.getAppIds();</span><br><span class="line">        <span class="keyword">if</span> (Validator.isNull(appIds))&#123;</span><br><span class="line">            log.warn(<span class="string">&quot;参数校验异常！appIds:&#123;&#125;&quot;</span>, appIds);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(MessageCodeEnum.NO_UPDATE.getCode(), <span class="string">&quot;参数校验异常!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;OpnMaintenanceDto&gt; opnMaintenanceParams = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">OpnMaintenanceDto</span> <span class="variable">opnMaintenanceDto</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; appIds.size(); i++)&#123;</span><br><span class="line">            opnMaintenanceParam.setId(appIds.get(i));</span><br><span class="line">            opnMaintenanceParam.setSortPosition(i + <span class="number">1</span>);</span><br><span class="line">            opnMaintenanceDto = <span class="keyword">new</span> <span class="title class_">OpnMaintenanceDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(opnMaintenanceParam,opnMaintenanceDto);</span><br><span class="line">            opnMaintenanceParams.add(opnMaintenanceDto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(opnAppDao.editMaintenanceDetailSort(opnMaintenanceParams));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>Dao层<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;editMaintenanceDetailSort&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">       UPDATE</span><br><span class="line">       opn_app</span><br><span class="line">       <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;sort_position =case&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;end,&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;i.id!=null&quot;</span>&gt;</span></span><br><span class="line">                       when id=#&#123;i.id&#125; then #&#123;i.sortPosition&#125;</span><br><span class="line">                   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">       WHERE id IN</span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;i&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">           #&#123;i.id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运行命令解析</title>
      <link href="/Java/java_run/"/>
      <url>/Java/java_run/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前一直都是运行服务器上编写好的脚本来启动服务，今日刚好需要在本机运行一个jar包，之前没有学习总结，这次就深入了解一下吧。</p><span id="more"></span><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx512m -XX:MetaspaceSize=<span class="number">256</span>m -XX:MaxMetaspaceSize=<span class="number">256</span>m -jar demo-xxxxx-xxxx-management<span class="number">-1.0</span><span class="number">.0</span>-SNAPSHOT.jar <span class="comment">--spring.profiles.active=dev</span></span><br></pre></td></tr></table></figure><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://s4.ax1x.com/2021/12/15/TSWHFs.jpg" alt="Java命令"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java运行命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网址收藏</title>
      <link href="/Collections/website_collect/"/>
      <url>/Collections/website_collect/</url>
      
        <content type="html"><![CDATA[<h3 id="影视类"><a href="#影视类" class="headerlink" title="影视类"></a>影视类</h3><ul><li> <a href="https://www.pianku.li/">片库 - 全网高清影视聚合下载</a></li><li> <a href="https://www.555dy2.com/win.html">555电影网-影视大全</a></li><li> <a href="http://www.kuhuiv.com/">酷绘视频 - 轻松随心看</a></li></ul><h3 id="办公类"><a href="#办公类" class="headerlink" title="办公类"></a>办公类</h3><ul><li><a href="https://npm.taobao.org/mirrors">淘宝镜像</a></li><li><a href="https://gitmind.cn/">思乎 · GitMind - 全平台思维导图软件</a></li><li> <a href="https://draw.io/">diagrams · 免费画图</a> </li><li> <a href="https://www.aconvert.com/cn/">在线转换文档</a></li></ul><h3 id="资讯类"><a href="#资讯类" class="headerlink" title="资讯类"></a>资讯类</h3><ul><li> <a href="https://tophub.today/">今日热榜官网</a></li><li> <a href="https://www.daohangtx2.com/">技术导航 - 学习技术 从这里开始</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 收藏 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
